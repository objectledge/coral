#*
 * Objects in context:
 *   $license
 *   $class
 *   $imports
 *   $custom 
 *###
##
#set($attributes = $class.concreteImplAttributes)
#set($requiredAttributes = $class.concreteRequiredAttributes)
##
$imports.add("org.objectledge.coral.BackendException")##
$imports.add("org.objectledge.coral.entity.EntityDoesNotExistException")##
$imports.add("org.objectledge.coral.schema.CoralSchema")##
$imports.add("org.objectledge.coral.schema.AttributeDefinition")##
$imports.add("org.objectledge.coral.schema.ResourceClass")##
$imports.add("org.objectledge.coral.session.CoralSession")##
$imports.add("org.objectledge.coral.store.Resource")##
$imports.add("org.objectledge.coral.store.ValueRequiredException")##
$imports.add("org.objectledge.coral.store.ModificationNotPermittedException")##
$imports.add("org.objectledge.database.Database")##
$imports.add("org.jcontainer.dna.Logger")##
$imports.add("java.util.Map")##
$imports.add("java.util.HashMap")##
##
$imports.add($class.implParent.getFQimplClassName())
#foreach($attr in $attributes)
#if(!$attr.primitive)
$imports.add($attr.getFQJavaType())##
#end
#end
##
$license##
package $package;

$imports##
/**
 * An implementation of <code>${class.name}</code> ARL resource class.
 *
 * @author Coral Maven plugin
 */
public class ${class.implClassName}
    extends ${class.implParent.implClassName}
    implements ${class.interfaceClassName}
{
#if($class.attributes.size() > 0)
    // instance variables ////////////////////////////////////////////////////

#foreach($attr in $attributes)
    /** The AttributeDefinition object for the <code>${attr.name}</code> attribute. */
    private AttributeDefinition ${attr.name}Def;

#end
#end
    // initialization /////////////////////////////////////////////////////////

    /**
     * Creates a blank <code>${class.name}</code> resource wrapper.
     *
     * <p>This constructor should be used by the handler class only. Use 
     * <code>load()</code> and <code>create()</code> methods to create
     * instances of the wrapper in your application code.</p>
     *
     * @param schema the CoralSchema.
     * @param database the Database.
     * @param logger the Logger.
     */
    public ${class.implClassName}(CoralSchema schema, Database database, Logger logger)
    {
        super(schema, database, logger);
#if($attributes.size() > 0)
        try
        {
            ResourceClass rc = schema.getResourceClass("${class.name}");
#foreach($attr in $attributes)
            ${attr.name}Def = rc.getAttribute("${attr.name}");
#end
        }
        catch(EntityDoesNotExistException e)
        {
            throw new BackendException("incompatible schema change", e);
        }
#end
    }

    // static methods ////////////////////////////////////////////////////////

    /**
     * Retrieves a <code>${class.name}</code> resource instance from the store.
     *
     * <p>This is a simple wrapper of StoreService.getResource() method plus
     * the typecast.</p>
     *
     * @param session the CoralSession
     * @param id the id of the object to be retrieved
     */
    public static ${class.interfaceClassName} get${class.interfaceClassName}(CoralSession session, long id)
        throws EntityDoesNotExistException
    {
        Resource res = session.getStore().getResource(id);
        if(!(res instanceof $class.interfaceClassName))
        {
            throw new IllegalArgumentException("resource #"+id+" is "+
                                               res.getResourceClass().getName()+
                                               " not ${class.name}");
        }
        return ($java.interfaceClassName)res;
    }

#if(!$abstract)
    /**
     * Creates a new <code>${class.name}</code> resource instance.
     *
     * @param the session CoralSession
     * @param name the name of the new resource
     * @param parent the parent resource.
#foreach($attr in $requiredAttributes)
     * @param ${attr.name} the ${attr.name} attribute
#end
     * @return a new ${class.interfaceClassName} instance.
     */
    public static ${clsss.interfaceClassName} create${clsss.interfaceClassName}(CoralSession session, String name, Resource parent#if($requiredAttributes.size() > 0), #foreach($attr in $requiredAttributes)$attr.javaType $attr.name#if($velocityCount != $requiredAttributes.size()), #end#end#end)
        throws ValueRequiredException
    {
        try
        {
            ResourceClass rc = session.getSchema().getResourceClass("${class.name}");
            Map attrs = new HashMap();
#foreach($attr in $requiredAttributes)
#if($attr.primitive)
            attrs.put(rc.getAttribute("${attr.name}"), new ${attr.primitiveWrapperType}(${attr.name}));
#else
            attrs.put(rc.getAttribute("${attr.name}"), ${attr.name});
#end
#end
            Resource res = rs.getStore().createResource(name, parent, rc, attrs);
            if(!(res instanceof ${class.interfaceClassName}))
            {
                throw new BackendException("incosistent schema: created object is "+
                                           res.getClass().getName());
            }
            return ($class.interfaceClassName)res;
        }
        catch(EntityDoesNotExistException e)
        {
            throw new BackendException("incompatible schema change", e);
        }
    }
#end
#if($attributes.size() > 0)

    // public interface //////////////////////////////////////////////////////
#foreach($attr in $attributes)
#if($attr.primitive)

    /**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @return the value of the <code>${attr.name}</code> attribute.
     * @throws IllegalStateException if the value of the attribute is 
     *         undefined.
     */
    public ${attr.javaType} get${attr.javaName}()
    {
        if(isDefined(${attr.name}Def))
        {
            return (($attr.primitiveWrapperType)get(${attr.name}Def)).${attr.javaType}Value();
        }
        else
        {
            throw new IllegalStateException("attribute value is undefined");
        }
    }
#if(!$attr.readonly)

    /**
     * Sets the value of the <code>${attr.name}</code> attribute.
     *
     * @param value the value of the <code>${attr.name}</code> attribute.
     */
    public void set${attr.javaName}(${attr.javaType} value)
    {
        try
        {
            set(${attr.name}Def, new ${attr.primitiveWrapperType}(value));
        }
        catch(ModificationNotPermitedException e)
        {
            throw new BackendException("incompatible schema change",e);
        }
        catch(ValueRequiredException e)
        {
            throw new BackendException("incompatible schema change",e);
        }
    }
#if(!$attr.required)

    /**
     * Removes the value of the <code>${attr.name}</code> attribute.
     */
    public void unset${attr.javaName}()
    {
        try
        {
            unset(${attr.name}Def);
        }
        catch(ValueRequiredException e)
        {
            throw new BackendException("incompatible schema change",e);
        }     
    } 
#end ## !$attr.required
#end ## $attr.readonly
#else ## $!attr.java_primitive

    /**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @return the value of the <code>${attr.name}</code> attribute.
     */
    public $attr.javaType get${attr.javaName}()
    {
        return ($attr.javaType)get(${attr.name}Def);
    }
#if(!$attr.readonly)
#if(!$attr.required)

    /**
     * Sets the value of the <code>$attr.arl_name</code> attribute.
     *
     * @param value the value of the <code>$attr.arl_name</code> attribute,
     *        or <code>null</code> to remove value.
     */
    public void set${attr.javaName}($attr.javaType value)
    {
        try
        {
            if(value != null)
            {
                set(${attr.name}Def, value);
            }
            else
            {
                unset(${attr.name}Def);
            }
        }
        catch(ModificationNotPermitedException e)
        {
            throw new BackendException("incompatible schema change",e);
        }
        catch(ValueRequiredException e)
        {
            throw new BackendException("incompatible schema change",e);
        }
    }
#else ## $attr.required

    /**
     * Sets the value of the <code>${attr.name}</code> attribute.
     *
     * @param value the value of the <code>${attr.name}</code> attribute.
     * @throws ValueRequiredException if you attempt to set a <code>null</code> 
     *         value.
     */
    public void set${attr.javaName}($attr.javaType value)
        throws ValueRequiredException
    {
        try
        {
            if(value != null)
            {
                set(${attr.name}Def, value);
            }
            else
            {
                throw new ValueRequiredException("attribute ${attr.name} "+
                                                 "is declared as REQUIRED");
            }
        }
        catch(ModificationNotPermitedException e)
        {
            throw new BackendException("incompatible schema change",e);
        }
    }
#end ## $attr.required
#end ## $attr.readonly
#end ## $attr.java_primitive
#end ## #foreach $attr
#end ## $attributes.length() > 0

    // @custom methods ///////////////////////////////////////////////////////
$!{custom}}
