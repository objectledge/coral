/* Generated By:JJTree&JavaCC: Do not edit this line. RelationQueryParser.java */
package org.objectledge.coral.relation.query.parser;

import java.io.StringReader;
import java.io.Reader;

/**
 * @author <a href="mailto:dgajda@caltha.pl">Damian Gajda</a>
 */
public class RelationQueryParser/*@bgen(jjtree)*/implements RelationQueryParserTreeConstants, RelationQueryParserConstants {/*@bgen(jjtree)*/
  protected JJTRelationQueryParserState jjtree = new JJTRelationQueryParserState();public static SimpleNode executeParse(String query)
        throws Exception
    {
        Reader reader = new StringReader(query);
        RelationQueryParser parser = new RelationQueryParser(reader);
        SimpleNode n = parser.Start();
        return n;
    }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SumExpression();
      jj_consume_token(12);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void SumExpression() throws ParseException {
      ASTSumExpression jjtn001 = new ASTSumExpression(this, JJTSUMEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      IntersectionExpression();
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case SUM:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(SUM);
        IntersectionExpression();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void IntersectionExpression() throws ParseException {
      ASTIntersectionExpression jjtn001 = new ASTIntersectionExpression(this, JJTINTERSECTIONEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case INTERSECT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(INTERSECT);
        UnaryExpression();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch (jj_nt.kind) {
    case 13:
      jj_consume_token(13);
      SumExpression();
      jj_consume_token(14);
      break;
    case 15:
    case 18:
    case 21:
      ResourceSetExpression();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResourceSetExpression() throws ParseException {
    switch (jj_nt.kind) {
    case 15:
      RelationMapExpression();
      break;
    case 18:
      TransitiveRelationMapExpression();
      break;
    case 21:
      ResolveExpression();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RelationMapExpression() throws ParseException {
 /*@bgen(jjtree) RelationMapExpression */
  ASTRelationMapExpression jjtn000 = new ASTRelationMapExpression(this, JJTRELATIONMAPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(15);
      RelationExpression();
      jj_consume_token(14);
      jj_consume_token(16);
      SumExpression();
      jj_consume_token(17);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TransitiveRelationMapExpression() throws ParseException {
 /*@bgen(jjtree) TransitiveRelationMapExpression */
  ASTTransitiveRelationMapExpression jjtn000 = new ASTTransitiveRelationMapExpression(this, JJTTRANSITIVERELATIONMAPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(18);
      RelationExpression();
      jj_consume_token(14);
      jj_consume_token(16);
      SumExpression();
      jj_consume_token(17);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RelationExpression() throws ParseException {
    switch (jj_nt.kind) {
    case 19:
      InvertedRelationExpression();
      break;
    case 20:
      RelationIdentifier();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InvertedRelationExpression() throws ParseException {
 /*@bgen(jjtree) InvertedRelationExpression */
  ASTInvertedRelationExpression jjtn000 = new ASTInvertedRelationExpression(this, JJTINVERTEDRELATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(19);
      RelationIdentifier();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RelationIdentifier() throws ParseException {
    jj_consume_token(20);
    RelationName();
    jj_consume_token(20);
  }

  final public void RelationName() throws ParseException {
 /*@bgen(jjtree) RelationName */
    ASTRelationName jjtn000 = new ASTRelationName(this, JJTRELATIONNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASTRelationName node = (ASTRelationName)jjtn000;
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER_NAME);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        node.relationName = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ResolveExpression() throws ParseException {
    jj_consume_token(21);
    switch (jj_nt.kind) {
    case 20:
      jj_consume_token(20);
      ResourceIdentifierPath();
      jj_consume_token(20);
      break;
    case IDENTIFIER_ID:
      ResourceIdentifierId();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(14);
  }

  final public void ResourceIdentifierId() throws ParseException {
 /*@bgen(jjtree) ResourceIdentifierId */
    ASTResourceIdentifierId jjtn000 = new ASTResourceIdentifierId(this, JJTRESOURCEIDENTIFIERID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASTResourceIdentifierId node = (ASTResourceIdentifierId)jjtn000;
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER_ID);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        node.identifier = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ResourceIdentifierPath() throws ParseException {
 /*@bgen(jjtree) ResourceIdentifierPath */
    ASTResourceIdentifierPath jjtn000 = new ASTResourceIdentifierPath(this, JJTRESOURCEIDENTIFIERPATH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASTResourceIdentifierPath node = (ASTResourceIdentifierPath)jjtn000;
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER_PATH);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        node.identifier = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  public RelationQueryParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20,0x40,0x24a000,0x248000,0x180000,0x100080,};
   }

  public RelationQueryParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RelationQueryParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public RelationQueryParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RelationQueryParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public RelationQueryParser(RelationQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(RelationQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[22];
    for (int i = 0; i < 22; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
