/* Generated By:JJTree&JavaCC: Do not edit this line. RMLTokenManager.java */
package org.objectledge.coral.script.parser;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;

public class RMLTokenManager implements RMLConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0x1ffffL) != 0L)
         {
            jjmatchedKind = 84;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffa3fdfffeee7c0L) != 0L || (active1 & 0x1f7ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 6;
         }
         if ((active0 & 0x5c02000111800L) != 0L || (active1 & 0x800L) != 0L)
            return 6;
         return -1;
      case 2:
         if ((active0 & 0x200180001580L) != 0L || (active1 & 0x4L) != 0L)
            return 6;
         if ((active0 & 0xfffe1fde7feee240L) != 0L || (active1 & 0x1f7fbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 2;
            }
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0xc0001f0229800000L) != 0L || (active1 & 0x4002L) != 0L)
            return 6;
         if ((active0 & 0x3ffe00dd566ee240L) != 0L || (active1 & 0x1b7f9L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x800c000c50060200L) != 0L || (active1 & 0xb400L) != 0L)
            return 6;
         if ((active0 & 0x3ff204d10768e040L) != 0L || (active1 & 0x103f9L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x2012000806480000L) != 0L || (active1 & 0x12001L) != 0L)
            return 6;
         if ((active0 & 0x1fe004d10124e040L) != 0L || (active1 & 0x3f8L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000041100208000L) != 0L || (active1 & 0x10L) != 0L)
            return 6;
         if ((active0 & 0xfe000c001046040L) != 0L || (active1 & 0x3e8L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0xe80000000000040L) != 0L || (active1 & 0x20L) != 0L)
            return 6;
         if ((active0 & 0x16000c001046000L) != 0L || (active1 & 0x3c8L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x100008000006000L) != 0L || (active1 & 0x200L) != 0L)
            return 6;
         if ((active0 & 0x60004001040000L) != 0L || (active1 & 0x1c8L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 8;
            }
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x60000000004000L) != 0L || (active1 & 0x1c0L) != 0L)
            return 6;
         if ((active0 & 0x4001040000L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 9;
            }
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0x40004001000000L) != 0L)
            return 6;
         if ((active0 & 0x40000L) != 0L || (active1 & 0x88L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 10;
            return 6;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000L) != 0L || (active1 & 0x80L) != 0L)
            return 6;
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      case 12:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 12;
            return 6;
         }
         return -1;
      case 13:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 13;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 40:
         return jjStopAtPos(0, 87);
      case 41:
         return jjStopAtPos(0, 88);
      case 44:
         return jjStopAtPos(0, 89);
      case 59:
         return jjStopAtPos(0, 98);
      case 60:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x208000000L);
      case 61:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 62:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x7fc0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xe0000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x7f00000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x3f0000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x70000000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0xff80000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ffL);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 62:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x10091000000000L, active1, 0x3400L);
      case 66:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 68:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fe0000001e00000L, active1, 0x7L);
      case 70:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 6);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x60032000000L, active1, 0x4008L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x40060300L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000400L, active1, 0L);
      case 79:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0xc000300184000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000e00080000L, active1, 0L);
      case 83:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x1f0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000c40060000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x438L);
      case 67:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 68:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 6);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x8000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0xc200000000400000L, active1, 0x3003L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x80004000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8101030000000L, active1, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x10000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x1c0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x70000102000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000001800040L, active1, 0L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 6);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000006200L, active1, 0x4000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000010000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000014080000L, active1, 0x10000L);
      case 67:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 68:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x80001000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 6);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 6);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x901c04c002400200L, active1, 0x1c1L);
      case 70:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 6);
         break;
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 72:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 6);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000200000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x408L);
      case 77:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000L, active1, 0L);
      case 79:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x2400000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000L, active1, 0x8020L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0x200L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000000L, active1, 0x3000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x1L);
      case 69:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 6);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2010L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x860000004006000L, active1, 0x8L);
      case 75:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000200000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x82000000000000L, active1, 0x20L);
      case 82:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 6);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 6);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x1100004001000040L, active1, 0x1c0L);
      case 83:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 6);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 84:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000800488000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000040L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xd0L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 6);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 6);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200000L, active1, 0x200L);
      case 73:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000001008000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      case 78:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 6);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x80040000000000L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000100000000L, active1, 0x100L);
      case 83:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 6);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x1160004000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 6);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 6);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 6);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000040L, active1, 0L);
      case 68:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 6);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 6);
         break;
      case 69:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x20L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0xc0L);
      case 78:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 6);
         break;
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x200004000000000L, active1, 0x100L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 82:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 6);
         break;
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000000000L, active1, 0L);
      case 84:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x46000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc0L);
      case 68:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 6);
         break;
      case 69:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 6);
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000000L, active1, 0x200L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x100L);
      case 78:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000040000L, active1, 0L);
      case 83:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 84:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x1006000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 67:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 6);
         break;
      case 69:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 6);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L, active1, 0x100L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x1040000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xc0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
      case 83:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 6);
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 72, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 6);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 38, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 54, 6);
         break;
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 18, 6);
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8L);
      case 83:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 71, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 81:
         return jjMoveStringLiteralDfa13_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa14_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(14, 67, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(7);
                  }
                  else if ((0xc40000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 35)
                     jjCheckNAddStates(3, 5);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0xc40000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ffc40000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(7);
                  break;
               case 8:
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if (curChar == 39 && kind > 86)
                     kind = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  jjAddStates(3, 5);
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(6, 7);
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   9, 10, 11, 1, 2, 4, 12, 13, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\101\102\123\124\122\101\103\124", 
"\101\104\104", "\101\114\114", "\101\114\124\105\122", "\101\116\104", "\101\123", 
"\101\123\103", "\101\124\124\122\111\102\125\124\105", 
"\101\124\124\122\111\102\125\124\105\123", "\102\125\111\114\124\111\116", "\102\131", "\103\114\101\123\123", 
"\103\114\101\123\123\137\125\116\111\121\125\105", "\103\122\105\101\124\105", "\104\102", "\104\105\106\111\116\105\104", 
"\104\105\114\105\124\105", "\104\105\123\103", "\104\105\123\103\122\111\120\124\111\126\105", 
"\104\111\122\105\103\124", "\104\117\115\101\111\116", "\105\103\110\117", "\106\111\116\101\114", 
"\106\111\116\104", "\106\114\101\107\123", "\106\117\122", "\106\117\122\127\101\122\104", 
"\106\122\117\115", "\107\122\101\116\124", "\107\122\101\116\124\123", 
"\110\101\116\104\114\105\122", "\111\104", "\111\115\120\105\122\123\117\116\101\124\105", 
"\111\116\104\105\130\101\102\114\105", "\112\101\126\101", "\114\111\113\105", "\114\111\113\105\137\116\103", 
"\116\101\115\105", "\116\117\116\105", "\116\117\124", "\117\106", "\117\116", "\117\122", 
"\117\120\124\111\117\116", "\117\122\104\105\122", "\117\127\116\105\122", "\120\101\122\105\116\124", 
"\120\105\122\115\111\123\123\111\117\116", "\120\105\122\115\111\123\123\111\117\116\123", 
"\122\105\101\104\117\116\114\131", "\122\105\103\125\122\123\111\126\105", "\122\105\114\101\124\111\117\116", 
"\122\105\123\117\125\122\103\105", "\122\105\121\125\111\122\105\104", "\122\105\126\105\122\123\105", 
"\122\105\126\117\113\105", "\122\117\114\105", "\122\117\114\105\123", "\123\105\114\105\103\124", 
"\123\105\114\106", "\123\105\124", 
"\123\111\102\114\111\116\107\123\137\125\116\111\121\125\105", "\123\125\102\112\105\103\124", "\123\125\102\122\117\114\105\123", 
"\123\125\120\105\122\103\114\101\123\123", "\123\125\120\105\122\103\114\101\123\123\105\123", 
"\123\125\120\105\122\122\117\114\105\123", "\123\131\116\124\110\105\124\111\103", "\124\101\102\114\105", "\124\117", 
"\126\101\114\125\105", "\126\101\114\125\105\123", "\127\111\124\110", "\127\110\105\122\105", 
"\127\110\117\101\115\111", null, null, null, null, null, null, "\50", "\51", "\54", "\74", "\74\75", 
"\76", "\76\75", "\75", "\75\75", "\41\75", "\74\76", "\73", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7fff1ffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[14];
private final int[] jjstateSet = new int[28];
protected char curChar;
public RMLTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public RMLTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
