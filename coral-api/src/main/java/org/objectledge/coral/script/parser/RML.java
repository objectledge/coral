/* Generated By:JJTree&JavaCC: Do not edit this line. RML.java */
package org.objectledge.coral.script.parser;

import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;

import java.util.ArrayList;

public class RML/*@bgen(jjtree)*/implements RMLTreeConstants, RMLConstants {/*@bgen(jjtree)*/
  protected JJTRMLState jjtree = new JJTRMLState();private String unquote(String str)
    {
        char[] c = str.toCharArray();
        StringBuffer out = new StringBuffer();
        for(int i=1; i<c.length-1; i++)
        {
            if(c[i] != '\\')
            {
                out.append(c[i]);
            }
            else
            {
                out.append(c[++i]);
            }
        }
        return out.toString();
    }

    void jjtreeOpenNodeScope(Node n)
    {
        ((SimpleNode)n).firstToken = getToken(1);
    }

    void jjtreeCloseNodeScope(Node n)
    {
        ((SimpleNode)n).lastToken = getToken(0);
    }

// Identifiers ///////////////////////////////////////////////////////////////
  final public String name() throws ParseException {
    Token t;
    String value;
    switch (jj_nt.kind) {
    case STRING:
      t = jj_consume_token(STRING);
           value = t.image;
      break;
    case QUOTED_STRING:
      t = jj_consume_token(QUOTED_STRING);
           value = unquote(t.image);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String value() throws ParseException {
    Token t;
    String value;
    switch (jj_nt.kind) {
    case STRING:
      t = jj_consume_token(STRING);
           value = t.image;
      break;
    case QUOTED_STRING:
      t = jj_consume_token(QUOTED_STRING);
           value = unquote(t.image);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                      value = t.image;
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public long id() throws ParseException {
    Token id;
    id = jj_consume_token(NUMBER);
        long value = Long.parseLong(id.image);
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

// Entities //////////////////////////////////////////////////////////////////
  final public void entitySpecifier(SimpleNode node) throws ParseException {
    switch (jj_nt.kind) {
    case STRING:
    case QUOTED_STRING:
      node.entityName = name();
      break;
    case NUMBER:
      node.entityId = id();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ASTattributeClass attributeClass() throws ParseException {
 /*@bgen(jjtree) attributeClass */
  ASTattributeClass jjtn000 = new ASTattributeClass(this, JJTATTRIBUTECLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTresourceClass resourceClass() throws ParseException {
 /*@bgen(jjtree) resourceClass */
  ASTresourceClass jjtn000 = new ASTresourceClass(this, JJTRESOURCECLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTsubject subject() throws ParseException {
 /*@bgen(jjtree) subject */
  ASTsubject jjtn000 = new ASTsubject(this, JJTSUBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTrole role() throws ParseException {
 /*@bgen(jjtree) role */
  ASTrole jjtn000 = new ASTrole(this, JJTROLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTpermission permission() throws ParseException {
 /*@bgen(jjtree) permission */
  ASTpermission jjtn000 = new ASTpermission(this, JJTPERMISSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTresource resource() throws ParseException {
 /*@bgen(jjtree) resource */
  ASTresource jjtn000 = new ASTresource(this, JJTRESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

// Lexical entities //////////////////////////////////////////////////////////
  final public ASTresourceClassFlag resourceClassFlag() throws ParseException {
 /*@bgen(jjtree) resourceClassFlag */
    ASTresourceClassFlag jjtn000 = new ASTresourceClassFlag(this, JJTRESOURCECLASSFLAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token flag;
    try {
      switch (jj_nt.kind) {
      case ABSTRACT:
        flag = jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        flag = jj_consume_token(FINAL);
        break;
      case BUILTIN:
        flag = jj_consume_token(BUILTIN);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        jjtn000.value = flag.image;
        {if (true) return jjtn000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTattributeFlag attributeFlag() throws ParseException {
 /*@bgen(jjtree) attributeFlag */
    ASTattributeFlag jjtn000 = new ASTattributeFlag(this, JJTATTRIBUTEFLAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token flag;
    try {
      switch (jj_nt.kind) {
      case REQUIRED:
        flag = jj_consume_token(REQUIRED);
        break;
      case READONLY:
        flag = jj_consume_token(READONLY);
        break;
      case DESCRIPTIVE:
        flag = jj_consume_token(DESCRIPTIVE);
        break;
      case BUILTIN:
        flag = jj_consume_token(BUILTIN);
        break;
      case INDEXABLE:
        flag = jj_consume_token(INDEXABLE);
        break;
      case CLASS_UNIQUE:
        flag = jj_consume_token(CLASS_UNIQUE);
        break;
      case SIBLINGS_UNIQUE:
        flag = jj_consume_token(SIBLINGS_UNIQUE);
        break;
      case SYNTHETIC:
        flag = jj_consume_token(SYNTHETIC);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        jjtn000.value = flag.image;
        {if (true) return jjtn000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTattributeDefinition attributeDefinition() throws ParseException {
 /*@bgen(jjtree) attributeDefinition */
  ASTattributeDefinition jjtn000 = new ASTattributeDefinition(this, JJTATTRIBUTEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.attributeFlags = attributeFlagList();
      jjtn000.attributeClass = attributeClass();
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        jjtn000.domain = name();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jjtn000.attributeName = name();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTattribute attribute() throws ParseException {
 /*@bgen(jjtree) attribute */
  ASTattribute jjtn000 = new ASTattribute(this, JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.attributeName = name();
      jj_consume_token(EQUALS);
      jjtn000.value = value();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

// Entity lists //////////////////////////////////////////////////////////////
  final public ASTresourceClassList resourceClassList() throws ParseException {
 /*@bgen(jjtree) resourceClassList */
  ASTresourceClassList jjtn000 = new ASTresourceClassList(this, JJTRESOURCECLASSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      resourceClass();
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        resourceClass();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTroleList roleList() throws ParseException {
 /*@bgen(jjtree) roleList */
  ASTroleList jjtn000 = new ASTroleList(this, JJTROLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      role();
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        role();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTpermissionList permissionList() throws ParseException {
 /*@bgen(jjtree) permissionList */
  ASTpermissionList jjtn000 = new ASTpermissionList(this, JJTPERMISSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      permission();
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        permission();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTattributeFlagList attributeFlagList() throws ParseException {
 /*@bgen(jjtree) attributeFlagList */
  ASTattributeFlagList jjtn000 = new ASTattributeFlagList(this, JJTATTRIBUTEFLAGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case BUILTIN:
        case CLASS_UNIQUE:
        case DESCRIPTIVE:
        case INDEXABLE:
        case READONLY:
        case REQUIRED:
        case SIBLINGS_UNIQUE:
        case SYNTHETIC:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        attributeFlag();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTresourceClassFlagList resourceClassFlagList() throws ParseException {
 /*@bgen(jjtree) resourceClassFlagList */
  ASTresourceClassFlagList jjtn000 = new ASTresourceClassFlagList(this, JJTRESOURCECLASSFLAGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        switch (jj_nt.kind) {
        case ABSTRACT:
        case BUILTIN:
        case FINAL:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        resourceClassFlag();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTattributeDefinitionList attributeDefinitionList() throws ParseException {
 /*@bgen(jjtree) attributeDefinitionList */
  ASTattributeDefinitionList jjtn000 = new ASTattributeDefinitionList(this, JJTATTRIBUTEDEFINITIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      attributeDefinition();
      label_6:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        attributeDefinition();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTattributeList attributeList() throws ParseException {
 /*@bgen(jjtree) attributeList */
  ASTattributeList jjtn000 = new ASTattributeList(this, JJTATTRIBUTELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      attribute();
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        attribute();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

// Statement groups //////////////////////////////////////////////////////////
  final public ASTscript script() throws ParseException {
 /*@bgen(jjtree) script */
  ASTscript jjtn000 = new ASTscript(this, JJTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case ALTER:
        case CREATE:
        case DELETE:
        case ECHO:
        case FIND:
        case GRANT:
        case IMPERSONATE:
        case REVOKE:
        case WHOAMI:
        case 93:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        switch (jj_nt.kind) {
        case ALTER:
        case CREATE:
        case DELETE:
        case ECHO:
        case FIND:
        case GRANT:
        case IMPERSONATE:
        case REVOKE:
        case WHOAMI:
          statement();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(93);
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void singleStatement() throws ParseException {
 /*@bgen(jjtree) singleStatement */
  ASTsingleStatement jjtn000 = new ASTsingleStatement(this, JJTSINGLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      statement();
      switch (jj_nt.kind) {
      case 93:
        jj_consume_token(93);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// Statements ////////////////////////////////////////////////////////////////
  final public void statement() throws ParseException {
    switch (jj_nt.kind) {
    case CREATE:
      jj_consume_token(CREATE);
      createStatement();
      break;
    case FIND:
      jj_consume_token(FIND);
      findStatement();
      break;
    case ALTER:
      jj_consume_token(ALTER);
      alterStatement();
      break;
    case DELETE:
      jj_consume_token(DELETE);
      deleteStatement();
      break;
    case GRANT:
      jj_consume_token(GRANT);
      grantStatement();
      break;
    case REVOKE:
      jj_consume_token(REVOKE);
      revokeStatement();
      break;
    case ECHO:
      jj_consume_token(ECHO);
      echoStatement();
      break;
    case IMPERSONATE:
      jj_consume_token(IMPERSONATE);
      impersonateStatement();
      break;
    case WHOAMI:
        ASTwhoamiStatement jjtn001 = new ASTwhoamiStatement(this, JJTWHOAMISTATEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(WHOAMI);
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void createStatement() throws ParseException {
    switch (jj_nt.kind) {
    case ATTRIBUTE:
      jj_consume_token(ATTRIBUTE);
      jj_consume_token(CLASS);
      createAttributeClassStatement();
      break;
    case SUBJECT:
      jj_consume_token(SUBJECT);
      createSubjectStatement();
      break;
    case ROLE:
      jj_consume_token(ROLE);
      createRoleStatement();
      break;
    case PERMISSION:
      jj_consume_token(PERMISSION);
      createPermissionStatement();
      break;
    case RESOURCE:
      jj_consume_token(RESOURCE);
      switch (jj_nt.kind) {
      case CLASS:
        jj_consume_token(CLASS);
        createResourceClassStatement();
        break;
      case STRING:
      case QUOTED_STRING:
        createResourceStatement();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void findStatement() throws ParseException {
    switch (jj_nt.kind) {
    case ATTRIBUTE:
      jj_consume_token(ATTRIBUTE);
      jj_consume_token(CLASS);
      findAttributeClassStatement();
      break;
    case SUBJECT:
      jj_consume_token(SUBJECT);
      findSubjectStatement();
      break;
    case ROLE:
      jj_consume_token(ROLE);
      findRoleStatement();
      break;
    case PERMISSION:
      jj_consume_token(PERMISSION);
      findPermissionStatement();
      break;
    case RESOURCE:
      jj_consume_token(RESOURCE);
      switch (jj_nt.kind) {
      case CLASS:
        jj_consume_token(CLASS);
        findResourceClassStatement();
        break;
      default:
        jj_la1[19] = jj_gen;
        findResourceStatement();
      }
      break;
    case GRANTS:
      jj_consume_token(GRANTS);
      jj_consume_token(FOR);
      findGrantsForStatement();
      break;
    case DIRECT:
      jj_consume_token(DIRECT);
      findDirectStatement();
      break;
    case SUPERROLES:
      jj_consume_token(SUPERROLES);
      jj_consume_token(OF);
      findSuperrolesStatement(false);
      break;
    case SUBROLES:
      jj_consume_token(SUBROLES);
      jj_consume_token(OF);
      findSubrolesStatement(false);
      break;
    case ROLES:
      jj_consume_token(ROLES);
      jj_consume_token(OF);
      findRolesStatement(false);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void findGrantsForStatement() throws ParseException {
    switch (jj_nt.kind) {
    case SUBJECT:
      jj_consume_token(SUBJECT);
      findGrantsForSubjectStatement();
      break;
    case ROLE:
      jj_consume_token(ROLE);
      findGrantsForRoleStatement();
      break;
    case RESOURCE:
      jj_consume_token(RESOURCE);
      switch (jj_nt.kind) {
      case CLASS:
        jj_consume_token(CLASS);
        findGrantsForResourceClassStatement();
        break;
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        findGrantsForResourceStatement();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void findDirectStatement() throws ParseException {
    switch (jj_nt.kind) {
    case SUPERROLES:
      jj_consume_token(SUPERROLES);
      jj_consume_token(OF);
      findSuperrolesStatement(true);
      break;
    case SUBROLES:
      jj_consume_token(SUBROLES);
      jj_consume_token(OF);
      findSubrolesStatement(true);
      break;
    case ROLES:
      jj_consume_token(ROLES);
      jj_consume_token(OF);
      findRolesStatement(true);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alterStatement() throws ParseException {
    switch (jj_nt.kind) {
    case ATTRIBUTE:
      jj_consume_token(ATTRIBUTE);
      jj_consume_token(CLASS);
      alterAttributeClassStatement();
      break;
    case SUBJECT:
      jj_consume_token(SUBJECT);
      alterSubjectStatement();
      break;
    case ROLE:
      jj_consume_token(ROLE);
      alterRoleStatement();
      break;
    case PERMISSION:
      jj_consume_token(PERMISSION);
      alterPermissionStatement();
      break;
    case RESOURCE:
      jj_consume_token(RESOURCE);
      switch (jj_nt.kind) {
      case CLASS:
        jj_consume_token(CLASS);
        alterResourceClassStatement();
        break;
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        alterResourceStatement();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alterAttributeClassStatement() throws ParseException {
    ASTattributeClass ac;
    ac = attributeClass();
    jj_consume_token(SET);
    switch (jj_nt.kind) {
    case NAME:
      jj_consume_token(NAME);
      alterAttributeClassSetNameStatement(ac);
      break;
    case JAVA:
      jj_consume_token(JAVA);
      jj_consume_token(CLASS);
      alterAttributeClassSetJavaClassStatement(ac);
      break;
    case HANDLER:
      jj_consume_token(HANDLER);
      jj_consume_token(CLASS);
      alterAttributeClassSetHandlerClassStatement(ac);
      break;
    case DB:
      jj_consume_token(DB);
      jj_consume_token(TABLE);
      alterAttributeClassSetDbTableStatement(ac);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alterResourceClassStatement() throws ParseException {
    ASTresourceClass rc;
    String attr;
    rc = resourceClass();
    switch (jj_nt.kind) {
    case SET:
      jj_consume_token(SET);
      switch (jj_nt.kind) {
      case NAME:
        jj_consume_token(NAME);
        alterResourceClassSetNameStatement(rc);
        break;
      case JAVA:
        jj_consume_token(JAVA);
        jj_consume_token(CLASS);
        alterResourceClassSetJavaClassStatement(rc);
        break;
      case HANDLER:
        jj_consume_token(HANDLER);
        jj_consume_token(CLASS);
        alterResourceClassSetHandlerClassStatement(rc);
        break;
      case DB:
        jj_consume_token(DB);
        jj_consume_token(TABLE);
        alterResourceClassSetDbTableStatement(rc);
        break;
      case FLAGS:
        jj_consume_token(FLAGS);
        alterResourceClassSetFlagsStatement(rc);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ADD:
      jj_consume_token(ADD);
      switch (jj_nt.kind) {
      case ATTRIBUTE:
        jj_consume_token(ATTRIBUTE);
        alterResourceClassAddAttributeStatement(rc);
        break;
      case SUPERCLASS:
        jj_consume_token(SUPERCLASS);
        alterResourceClassAddSuperclassStatement(rc);
        break;
      case PERMISSIONS:
        jj_consume_token(PERMISSIONS);
        alterResourceClassAddPermissionsStatement(rc);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DELETE:
      jj_consume_token(DELETE);
      switch (jj_nt.kind) {
      case ATTRIBUTE:
        jj_consume_token(ATTRIBUTE);
        alterResourceClassDeleteAttributeStatement(rc);
        break;
      case SUPERCLASS:
        jj_consume_token(SUPERCLASS);
        alterResourceClassDeleteSuperclassStatement(rc);
        break;
      case PERMISSIONS:
        jj_consume_token(PERMISSIONS);
        alterResourceClassDeletePermissionsStatement(rc);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ALTER:
      jj_consume_token(ALTER);
      jj_consume_token(ATTRIBUTE);
      attr = name();
      jj_consume_token(SET);
      switch (jj_nt.kind) {
      case NAME:
        jj_consume_token(NAME);
        alterResourceClassAlterAttributeSetNameStatement(rc, attr);
        break;
      case FLAGS:
        jj_consume_token(FLAGS);
        alterResourceClassAlterAttributeSetFlagsStatement(rc, attr);
        break;
      case DOMAIN:
        jj_consume_token(DOMAIN);
        alterResourceClassAlterAttributeSetDomainStatement(rc, attr);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alterSubjectStatement() throws ParseException {
    ASTsubject subject;
    subject = subject();
    jj_consume_token(SET);
    jj_consume_token(NAME);
    alterSubjectSetNameStatement(subject);
  }

  final public void alterRoleStatement() throws ParseException {
    ASTrole role;
    role = role();
    switch (jj_nt.kind) {
    case SET:
      jj_consume_token(SET);
      jj_consume_token(NAME);
      alterRoleSetNameStatement(role);
      break;
    case ADD:
      jj_consume_token(ADD);
      jj_consume_token(SUBROLES);
      alterRoleAddSubrolesStatement(role);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      jj_consume_token(SUBROLES);
      alterRoleDeleteSubrolesStatement(role);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alterPermissionStatement() throws ParseException {
    ASTpermission permission;
    permission = permission();
    jj_consume_token(SET);
    jj_consume_token(NAME);
    alterPermissionSetNameStatement(permission);
  }

  final public void alterResourceStatement() throws ParseException {
    ASTresource resource;
    resource = resource();
    switch (jj_nt.kind) {
    case SET:
      jj_consume_token(SET);
      switch (jj_nt.kind) {
      case NAME:
        jj_consume_token(NAME);
        alterResourceSetNameStatement(resource);
        break;
      case PARENT:
        jj_consume_token(PARENT);
        alterResourceSetParentStatement(resource);
        break;
      case OWNER:
        jj_consume_token(OWNER);
        alterResourceSetOwnerStatement(resource);
        break;
      case ATTRIBUTE:
        jj_consume_token(ATTRIBUTE);
        alterResourceSetAttributeStatement(resource);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DELETE:
      jj_consume_token(DELETE);
      jj_consume_token(ATTRIBUTE);
      alterResourceDeleteAttributeStatement(resource);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void deleteStatement() throws ParseException {
    switch (jj_nt.kind) {
    case ATTRIBUTE:
      jj_consume_token(ATTRIBUTE);
      jj_consume_token(CLASS);
      deleteAttributeClassStatement();
      break;
    case SUBJECT:
      jj_consume_token(SUBJECT);
      deleteSubjectStatement();
      break;
    case ROLE:
      jj_consume_token(ROLE);
      deleteRoleStatement();
      break;
    case PERMISSION:
      jj_consume_token(PERMISSION);
      deletePermissionStatement();
      break;
    case RESOURCE:
      jj_consume_token(RESOURCE);
      switch (jj_nt.kind) {
      case CLASS:
        jj_consume_token(CLASS);
        deleteResourceClassStatement();
        break;
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        deleteResourceStatement();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void grantStatement() throws ParseException {
    switch (jj_nt.kind) {
    case ROLE:
      jj_consume_token(ROLE);
      grantRoleStatement();
      break;
    case PERMISSION:
      jj_consume_token(PERMISSION);
      grantPermissionStatement();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void revokeStatement() throws ParseException {
    switch (jj_nt.kind) {
    case ROLE:
      jj_consume_token(ROLE);
      revokeRoleStatement();
      break;
    case PERMISSION:
      jj_consume_token(PERMISSION);
      revokePermissionStatement();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 1.1 Attribute classes /////////////////////////////////////////////////////
  final public void createAttributeClassStatement() throws ParseException {
 /*@bgen(jjtree) createAttributeClassStatement */
  ASTcreateAttributeClassStatement jjtn000 = new ASTcreateAttributeClassStatement(this, JJTCREATEATTRIBUTECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.name = name();
      jj_consume_token(JAVA);
      jj_consume_token(CLASS);
      jjtn000.javaClass = name();
      jj_consume_token(HANDLER);
      jj_consume_token(CLASS);
      jjtn000.handlerClass = name();
      switch (jj_nt.kind) {
      case DB:
        jj_consume_token(DB);
        jj_consume_token(TABLE);
        switch (jj_nt.kind) {
        case STRING:
        case QUOTED_STRING:
          jjtn000.dbTable = name();
          break;
        case NONE:
          jj_consume_token(NONE);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findAttributeClassStatement() throws ParseException {
 /*@bgen(jjtree) findAttributeClassStatement */
  ASTfindAttributeClassStatement jjtn000 = new ASTfindAttributeClassStatement(this, JJTFINDATTRIBUTECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        entitySpecifier(jjtn000);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void deleteAttributeClassStatement() throws ParseException {
 /*@bgen(jjtree) deleteAttributeClassStatement */
  ASTdeleteAttributeClassStatement jjtn000 = new ASTdeleteAttributeClassStatement(this, JJTDELETEATTRIBUTECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.attributeClass = attributeClass();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterAttributeClassSetNameStatement(ASTattributeClass attributeClass) throws ParseException {
 /*@bgen(jjtree) alterAttributeClassSetNameStatement */
    ASTalterAttributeClassSetNameStatement jjtn000 = new ASTalterAttributeClassSetNameStatement(this, JJTALTERATTRIBUTECLASSSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.attributeClass = attributeClass;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterAttributeClassSetJavaClassStatement(ASTattributeClass attributeClass) throws ParseException {
 /*@bgen(jjtree) alterAttributeClassSetJavaClassStatement */
    ASTalterAttributeClassSetJavaClassStatement jjtn000 = new ASTalterAttributeClassSetJavaClassStatement(this, JJTALTERATTRIBUTECLASSSETJAVACLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.attributeClass = attributeClass;
    try {
      jjtn000.javaClass = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterAttributeClassSetHandlerClassStatement(ASTattributeClass attributeClass) throws ParseException {
 /*@bgen(jjtree) alterAttributeClassSetHandlerClassStatement */
    ASTalterAttributeClassSetHandlerClassStatement jjtn000 = new ASTalterAttributeClassSetHandlerClassStatement(this, JJTALTERATTRIBUTECLASSSETHANDLERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.attributeClass = attributeClass;
    try {
      jjtn000.handlerClass = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterAttributeClassSetDbTableStatement(ASTattributeClass attributeClass) throws ParseException {
 /*@bgen(jjtree) alterAttributeClassSetDbTableStatement */
    ASTalterAttributeClassSetDbTableStatement jjtn000 = new ASTalterAttributeClassSetDbTableStatement(this, JJTALTERATTRIBUTECLASSSETDBTABLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.attributeClass = attributeClass;
    try {
      switch (jj_nt.kind) {
      case STRING:
      case QUOTED_STRING:
        jjtn000.dbTable = name();
        break;
      case NONE:
        jj_consume_token(NONE);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 2.1 Resource classes //////////////////////////////////////////////////////
  final public void createResourceClassStatement() throws ParseException {
 /*@bgen(jjtree) createResourceClassStatement */
  ASTcreateResourceClassStatement jjtn000 = new ASTcreateResourceClassStatement(this, JJTCREATERESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.resourceClassFlags = resourceClassFlagList();
      jjtn000.name = name();
      jj_consume_token(JAVA);
      jj_consume_token(CLASS);
      jjtn000.javaClass = name();
      jj_consume_token(HANDLER);
      jj_consume_token(CLASS);
      jjtn000.handlerClass = name();
      switch (jj_nt.kind) {
      case DB:
        jj_consume_token(DB);
        jj_consume_token(TABLE);
        switch (jj_nt.kind) {
        case STRING:
        case QUOTED_STRING:
          jjtn000.dbTable = name();
          break;
        case NONE:
          jj_consume_token(NONE);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case SUPERCLASSES:
        jj_consume_token(SUPERCLASSES);
        jj_consume_token(LPAREN);
        jjtn000.superClasses = resourceClassList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case ATTRIBUTES:
        jj_consume_token(ATTRIBUTES);
        jj_consume_token(LPAREN);
        jjtn000.attributeDefinitions = attributeDefinitionList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case PERMISSIONS:
        jj_consume_token(PERMISSIONS);
        jj_consume_token(LPAREN);
        jjtn000.permissions = permissionList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findResourceClassStatement() throws ParseException {
 /*@bgen(jjtree) findResourceClassStatement */
  ASTfindResourceClassStatement jjtn000 = new ASTfindResourceClassStatement(this, JJTFINDRESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        entitySpecifier(jjtn000);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void deleteResourceClassStatement() throws ParseException {
 /*@bgen(jjtree) deleteResourceClassStatement */
  ASTdeleteResourceClassStatement jjtn000 = new ASTdeleteResourceClassStatement(this, JJTDELETERESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.resourceClass = resourceClass();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassSetNameStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassSetNameStatement */
    ASTalterResourceClassSetNameStatement jjtn000 = new ASTalterResourceClassSetNameStatement(this, JJTALTERRESOURCECLASSSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
    }
  }

  final public void alterResourceClassSetJavaClassStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassSetJavaClassStatement */
    ASTalterResourceClassSetJavaClassStatement jjtn000 = new ASTalterResourceClassSetJavaClassStatement(this, JJTALTERRESOURCECLASSSETJAVACLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.javaClass = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassSetHandlerClassStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassSetHandlerClassStatement */
    ASTalterResourceClassSetHandlerClassStatement jjtn000 = new ASTalterResourceClassSetHandlerClassStatement(this, JJTALTERRESOURCECLASSSETHANDLERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.handlerClass = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassSetDbTableStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassSetDbTableStatement */
    ASTalterResourceClassSetDbTableStatement jjtn000 = new ASTalterResourceClassSetDbTableStatement(this, JJTALTERRESOURCECLASSSETDBTABLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      switch (jj_nt.kind) {
      case STRING:
      case QUOTED_STRING:
        jjtn000.dbTable = name();
        break;
      case NONE:
        jj_consume_token(NONE);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassSetFlagsStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassSetFlagsStatement */
    ASTalterResourceClassSetFlagsStatement jjtn000 = new ASTalterResourceClassSetFlagsStatement(this, JJTALTERRESOURCECLASSSETFLAGSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.resourceClassFlags = resourceClassFlagList();
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
    }
  }

  final public void alterResourceClassAlterAttributeSetNameStatement(ASTresourceClass resourceClass, String attr) throws ParseException {
 /*@bgen(jjtree) alterResourceClassAlterAttributeSetNameStatement */
    ASTalterResourceClassAlterAttributeSetNameStatement jjtn000 = new ASTalterResourceClassAlterAttributeSetNameStatement(this, JJTALTERRESOURCECLASSALTERATTRIBUTESETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    jjtn000.attributeName = attr;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassAlterAttributeSetFlagsStatement(ASTresourceClass resourceClass, String attr) throws ParseException {
 /*@bgen(jjtree) alterResourceClassAlterAttributeSetFlagsStatement */
    ASTalterResourceClassAlterAttributeSetFlagsStatement jjtn000 = new ASTalterResourceClassAlterAttributeSetFlagsStatement(this, JJTALTERRESOURCECLASSALTERATTRIBUTESETFLAGSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    jjtn000.attributeName = attr;
    try {
      jjtn000.attributeFlags = attributeFlagList();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassAlterAttributeSetDomainStatement(ASTresourceClass resourceClass, String attr) throws ParseException {
 /*@bgen(jjtree) alterResourceClassAlterAttributeSetDomainStatement */
    ASTalterResourceClassAlterAttributeSetDomainStatement jjtn000 = new ASTalterResourceClassAlterAttributeSetDomainStatement(this, JJTALTERRESOURCECLASSALTERATTRIBUTESETDOMAINSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    jjtn000.attributeName = attr;
    try {
      jjtn000.domain = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassAddAttributeStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassAddAttributeStatement */
    ASTalterResourceClassAddAttributeStatement jjtn000 = new ASTalterResourceClassAddAttributeStatement(this, JJTALTERRESOURCECLASSADDATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.attributeDefinition = attributeDefinition();
      switch (jj_nt.kind) {
      case VALUE:
        jj_consume_token(VALUE);
        jjtn000.value = value();
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassDeleteAttributeStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassDeleteAttributeStatement */
    ASTalterResourceClassDeleteAttributeStatement jjtn000 = new ASTalterResourceClassDeleteAttributeStatement(this, JJTALTERRESOURCECLASSDELETEATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.attributeName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassAddSuperclassStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassAddSuperclassStatement */
    ASTalterResourceClassAddSuperclassStatement jjtn000 = new ASTalterResourceClassAddSuperclassStatement(this, JJTALTERRESOURCECLASSADDSUPERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.superClass = resourceClass();
      switch (jj_nt.kind) {
      case VALUES:
        jj_consume_token(VALUES);
        jj_consume_token(LPAREN);
        jjtn000.attributeValues = attributeList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassDeleteSuperclassStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassDeleteSuperclassStatement */
    ASTalterResourceClassDeleteSuperclassStatement jjtn000 = new ASTalterResourceClassDeleteSuperclassStatement(this, JJTALTERRESOURCECLASSDELETESUPERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jjtn000.superClass = resourceClass();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 2.1 Permissions ///////////////////////////////////////////////////////////
  final public void createPermissionStatement() throws ParseException {
 /*@bgen(jjtree) createPermissionStatement */
  ASTcreatePermissionStatement jjtn000 = new ASTcreatePermissionStatement(this, JJTCREATEPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.name = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findPermissionStatement() throws ParseException {
 /*@bgen(jjtree) findPermissionStatement */
  ASTfindPermissionStatement jjtn000 = new ASTfindPermissionStatement(this, JJTFINDPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        entitySpecifier(jjtn000);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void deletePermissionStatement() throws ParseException {
 /*@bgen(jjtree) deletePermissionStatement */
  ASTdeletePermissionStatement jjtn000 = new ASTdeletePermissionStatement(this, JJTDELETEPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.permission = permission();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterPermissionSetNameStatement(ASTpermission perm) throws ParseException {
 /*@bgen(jjtree) alterPermissionSetNameStatement */
    ASTalterPermissionSetNameStatement jjtn000 = new ASTalterPermissionSetNameStatement(this, JJTALTERPERMISSIONSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.permission = perm;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 2.2 Roles /////////////////////////////////////////////////////////////////
  final public void createRoleStatement() throws ParseException {
 /*@bgen(jjtree) createRoleStatement */
  ASTcreateRoleStatement jjtn000 = new ASTcreateRoleStatement(this, JJTCREATEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.name = name();
      switch (jj_nt.kind) {
      case SUBROLES:
        jj_consume_token(SUBROLES);
        jj_consume_token(LPAREN);
        jjtn000.subRoles = roleList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findRoleStatement() throws ParseException {
 /*@bgen(jjtree) findRoleStatement */
  ASTfindRoleStatement jjtn000 = new ASTfindRoleStatement(this, JJTFINDROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        entitySpecifier(jjtn000);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void deleteRoleStatement() throws ParseException {
 /*@bgen(jjtree) deleteRoleStatement */
  ASTdeleteRoleStatement jjtn000 = new ASTdeleteRoleStatement(this, JJTDELETEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.role = role();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterRoleSetNameStatement(ASTrole role) throws ParseException {
 /*@bgen(jjtree) alterRoleSetNameStatement */
    ASTalterRoleSetNameStatement jjtn000 = new ASTalterRoleSetNameStatement(this, JJTALTERROLESETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.role = role;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterRoleAddSubrolesStatement(ASTrole role) throws ParseException {
 /*@bgen(jjtree) alterRoleAddSubrolesStatement */
    ASTalterRoleAddSubrolesStatement jjtn000 = new ASTalterRoleAddSubrolesStatement(this, JJTALTERROLEADDSUBROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.role = role;
    try {
      jj_consume_token(LPAREN);
      jjtn000.subRoles = roleList();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterRoleDeleteSubrolesStatement(ASTrole role) throws ParseException {
 /*@bgen(jjtree) alterRoleDeleteSubrolesStatement */
    ASTalterRoleDeleteSubrolesStatement jjtn000 = new ASTalterRoleDeleteSubrolesStatement(this, JJTALTERROLEDELETESUBROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.role = role;
    try {
      jj_consume_token(LPAREN);
      jjtn000.subRoles = roleList();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findSubrolesStatement(boolean direct) throws ParseException {
 /*@bgen(jjtree) findSubrolesStatement */
    ASTfindSubrolesStatement jjtn000 = new ASTfindSubrolesStatement(this, JJTFINDSUBROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.direct = direct;
    try {
      jjtn000.role = role();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findSuperrolesStatement(boolean direct) throws ParseException {
 /*@bgen(jjtree) findSuperrolesStatement */
    ASTfindSuperrolesStatement jjtn000 = new ASTfindSuperrolesStatement(this, JJTFINDSUPERROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.direct = direct;
    try {
      jjtn000.role = role();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 2.3 Subjects //////////////////////////////////////////////////////////////
  final public void createSubjectStatement() throws ParseException {
 /*@bgen(jjtree) createSubjectStatement */
  ASTcreateSubjectStatement jjtn000 = new ASTcreateSubjectStatement(this, JJTCREATESUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.name = name();
      switch (jj_nt.kind) {
      case ROLE:
        jj_consume_token(ROLE);
        jj_consume_token(LPAREN);
        jjtn000.roles = roleList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findSubjectStatement() throws ParseException {
 /*@bgen(jjtree) findSubjectStatement */
  ASTfindSubjectStatement jjtn000 = new ASTfindSubjectStatement(this, JJTFINDSUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        entitySpecifier(jjtn000);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void deleteSubjectStatement() throws ParseException {
 /*@bgen(jjtree) deleteSubjectStatement */
  ASTdeleteSubjectStatement jjtn000 = new ASTdeleteSubjectStatement(this, JJTDELETESUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.subject = subject();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterSubjectSetNameStatement(ASTsubject subject) throws ParseException {
 /*@bgen(jjtree) alterSubjectSetNameStatement */
    ASTalterSubjectSetNameStatement jjtn000 = new ASTalterSubjectSetNameStatement(this, JJTALTERSUBJECTSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.subject = subject;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 3.0 Resources /////////////////////////////////////////////////////////////

// Resource query grammar ////////////////////////////////////////////////////
  final public ASTconditionalExpression conditionalExpression() throws ParseException {
 /*@bgen(jjtree) conditionalExpression */
  ASTconditionalExpression jjtn000 = new ASTconditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      orExpression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void orExpression() throws ParseException {
      ASTorExpression jjtn001 = new ASTorExpression(this, JJTOREXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    try {
      andExpression();
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case OR:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_9;
        }
        jj_consume_token(OR);
        andExpression();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
  }

  final public void andExpression() throws ParseException {
      ASTandExpression jjtn001 = new ASTandExpression(this, JJTANDEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    try {
      simpleExpression();
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case AND:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_10;
        }
        jj_consume_token(AND);
        simpleExpression();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
  }

  final public void simpleExpression() throws ParseException {
    switch (jj_nt.kind) {
    case NOT:
      notExpression();
      break;
    case DEFINED:
    case STRING:
    case QUOTED_STRING:
    case LPAREN:
      primaryExpression();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void notExpression() throws ParseException {
 /*@bgen(jjtree) notExpression */
  ASTnotExpression jjtn000 = new ASTnotExpression(this, JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      primaryExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void primaryExpression() throws ParseException {
    switch (jj_nt.kind) {
    case DEFINED:
    case STRING:
    case QUOTED_STRING:
      condition();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      orExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condition() throws ParseException {
    String lhs;
    switch (jj_nt.kind) {
    case DEFINED:
      definedCondition();
      break;
    case STRING:
    case QUOTED_STRING:
      lhs = name();
      switch (jj_nt.kind) {
      case EQUALS:
      case DOUBLE_EQUALS:
      case NOT_EQUALS:
      case SQL_NOT_EQUALS:
        equalityCondition(lhs);
        break;
      case LESS:
      case LESS_EQUALS:
      case GREATER:
      case GREATER_EQUALS:
        comparisonCondition(lhs);
        break;
      case LIKE:
        approximationCondition(lhs);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void equalityCondition(String lhs) throws ParseException {
 /*@bgen(jjtree) equalityCondition */
    ASTequalityCondition jjtn000 = new ASTequalityCondition(this, JJTEQUALITYCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.lhs = lhs;
    Token t;
    try {
      jjtn000.operator = equalityOperator();
      switch (jj_nt.kind) {
      case QUOTED_STRING:
        t = jj_consume_token(QUOTED_STRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            jjtn000.literalRHS = true;
            jjtn000.rhs = unquote(t.image);
        break;
      case STRING:
      case NUMBER:
        switch (jj_nt.kind) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        case STRING:
          t = jj_consume_token(STRING);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            jjtn000.rhs = t.image;
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public int equalityOperator() throws ParseException {
    switch (jj_nt.kind) {
    case EQUALS:
    case DOUBLE_EQUALS:
      switch (jj_nt.kind) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case DOUBLE_EQUALS:
        jj_consume_token(DOUBLE_EQUALS);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return RMLOperator.EQUALS;}
      break;
    case NOT_EQUALS:
    case SQL_NOT_EQUALS:
      switch (jj_nt.kind) {
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
        break;
      case SQL_NOT_EQUALS:
        jj_consume_token(SQL_NOT_EQUALS);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return RMLOperator.NOT_EQUALS;}
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void comparisonCondition(String lhs) throws ParseException {
 /*@bgen(jjtree) comparisonCondition */
    ASTcomparisonCondition jjtn000 = new ASTcomparisonCondition(this, JJTCOMPARISONCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.lhs = lhs;
    Token t;
    try {
      jjtn000.operator = comparisonOperator();
      switch (jj_nt.kind) {
      case QUOTED_STRING:
        t = jj_consume_token(QUOTED_STRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            jjtn000.literalRHS = true;
            jjtn000.rhs = unquote(t.image);
        break;
      case STRING:
      case NUMBER:
        switch (jj_nt.kind) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        case STRING:
          t = jj_consume_token(STRING);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            jjtn000.rhs = t.image;
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public int comparisonOperator() throws ParseException {
    switch (jj_nt.kind) {
    case LESS:
      jj_consume_token(LESS);
        {if (true) return RMLOperator.LESSER;}
      break;
    case GREATER:
      jj_consume_token(GREATER);
        {if (true) return RMLOperator.GREATER;}
      break;
    case LESS_EQUALS:
      jj_consume_token(LESS_EQUALS);
        {if (true) return RMLOperator.LESSER_EQUALS;}
      break;
    case GREATER_EQUALS:
      jj_consume_token(GREATER_EQUALS);
        {if (true) return RMLOperator.GREATER_EQUALS;}
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void approximationCondition(String lhs) throws ParseException {
 /*@bgen(jjtree) approximationCondition */
    ASTapproximationCondition jjtn000 = new ASTapproximationCondition(this, JJTAPPROXIMATIONCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.lhs = lhs;
    Token t;
    try {
      jj_consume_token(LIKE);
      switch (jj_nt.kind) {
      case QUOTED_STRING:
        t = jj_consume_token(QUOTED_STRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            jjtn000.literalRHS = true;
            jjtn000.rhs = unquote(t.image);
        break;
      case STRING:
      case NUMBER:
        switch (jj_nt.kind) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        case STRING:
          t = jj_consume_token(STRING);
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
            jjtn000.rhs = t.image;
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void definedCondition() throws ParseException {
 /*@bgen(jjtree) definedCondition */
  ASTdefinedCondition jjtn000 = new ASTdefinedCondition(this, JJTDEFINEDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DEFINED);
      jjtn000.rhs = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public ASTclassAndAliasSpecifier classAndAliasSpecifier() throws ParseException {
 /*@bgen(jjtree) classAndAliasSpecifier */
  ASTclassAndAliasSpecifier jjtn000 = new ASTclassAndAliasSpecifier(this, JJTCLASSANDALIASSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.resourceClass = resourceClass();
      switch (jj_nt.kind) {
      case AS:
        jj_consume_token(AS);
        jjtn000.alias = name();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTclassAndAliasSpecifierList classAndAliasSpecifierList() throws ParseException {
 /*@bgen(jjtree) classAndAliasSpecifierList */
  ASTclassAndAliasSpecifierList jjtn000 = new ASTclassAndAliasSpecifierList(this, JJTCLASSANDALIASSPECIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      classAndAliasSpecifier();
      label_11:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        classAndAliasSpecifier();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTorderBySpecifier orderBySpecifier() throws ParseException {
 /*@bgen(jjtree) orderBySpecifier */
    ASTorderBySpecifier jjtn000 = new ASTorderBySpecifier(this, JJTORDERBYSPECIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.dir = true;
    try {
      jjtn000.attributeName = name();
      switch (jj_nt.kind) {
      case ASC:
      case DESC:
        switch (jj_nt.kind) {
        case ASC:
          jj_consume_token(ASC);
          break;
        case DESC:
          jj_consume_token(DESC);
            jjtn000.dir = false;
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTorderByList orderByList() throws ParseException {
 /*@bgen(jjtree) orderByList */
  ASTorderByList jjtn000 = new ASTorderByList(this, JJTORDERBYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      orderBySpecifier();
      label_12:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        orderBySpecifier();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTselectSpecifier selectSpecifier() throws ParseException {
 /*@bgen(jjtree) selectSpecifier */
  ASTselectSpecifier jjtn000 = new ASTselectSpecifier(this, JJTSELECTSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.attributeName = name();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTselectList selectList() throws ParseException {
 /*@bgen(jjtree) selectList */
  ASTselectList jjtn000 = new ASTselectList(this, JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      selectSpecifier();
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        selectSpecifier();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////////
  final public void createResourceStatement() throws ParseException {
 /*@bgen(jjtree) createResourceStatement */
  ASTcreateResourceStatement jjtn000 = new ASTcreateResourceStatement(this, JJTCREATERESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.name = name();
      jj_consume_token(RESOURCE);
      jj_consume_token(CLASS);
      jjtn000.resourceClass = resourceClass();
      jj_consume_token(PARENT);
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        jjtn000.parentResource = resource();
        break;
      case NONE:
        jj_consume_token(NONE);
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case ATTRIBUTES:
        jj_consume_token(ATTRIBUTES);
        jj_consume_token(LPAREN);
        jjtn000.attributeValues = attributeList();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public ASTfindResourceStatement findResourceStatement() throws ParseException {
 /*@bgen(jjtree) findResourceStatement */
  ASTfindResourceStatement jjtn000 = new ASTfindResourceStatement(this, JJTFINDRESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        jjtn000.resource = resource();
        break;
      default:
        jj_la1[85] = jj_gen;
        switch (jj_nt.kind) {
        case FROM:
          jj_consume_token(FROM);
          jjtn000.from = classAndAliasSpecifierList();
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
        switch (jj_nt.kind) {
        case WHERE:
          jj_consume_token(WHERE);
          jjtn000.where = conditionalExpression();
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
        switch (jj_nt.kind) {
        case ORDER:
          jj_consume_token(ORDER);
          jj_consume_token(BY);
          jjtn000.orderBy = orderByList();
          break;
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        switch (jj_nt.kind) {
        case SELECT:
          jj_consume_token(SELECT);
          jjtn000.select = selectList();
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void deleteResourceStatement() throws ParseException {
 /*@bgen(jjtree) deleteResourceStatement */
  ASTdeleteResourceStatement jjtn000 = new ASTdeleteResourceStatement(this, JJTDELETERESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entitySpecifier(jjtn000);
      switch (jj_nt.kind) {
      case RECURSIVE:
        jj_consume_token(RECURSIVE);
            jjtn000.recursive = true;
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceSetNameStatement(ASTresource resource) throws ParseException {
 /*@bgen(jjtree) alterResourceSetNameStatement */
    ASTalterResourceSetNameStatement jjtn000 = new ASTalterResourceSetNameStatement(this, JJTALTERRESOURCESETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resource = resource;
    try {
      jjtn000.newName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceSetParentStatement(ASTresource resource) throws ParseException {
 /*@bgen(jjtree) alterResourceSetParentStatement */
    ASTalterResourceSetParentStatement jjtn000 = new ASTalterResourceSetParentStatement(this, JJTALTERRESOURCESETPARENTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resource = resource;
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        jjtn000.parentResource = resource();
        break;
      case NONE:
        jj_consume_token(NONE);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceSetOwnerStatement(ASTresource resource) throws ParseException {
 /*@bgen(jjtree) alterResourceSetOwnerStatement */
    ASTalterResourceSetOwnerStatement jjtn000 = new ASTalterResourceSetOwnerStatement(this, JJTALTERRESOURCESETOWNERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resource = resource;
    try {
      jjtn000.owner = subject();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceSetAttributeStatement(ASTresource resource) throws ParseException {
 /*@bgen(jjtree) alterResourceSetAttributeStatement */
    ASTalterResourceSetAttributeStatement jjtn000 = new ASTalterResourceSetAttributeStatement(this, JJTALTERRESOURCESETATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resource = resource;
    try {
      jjtn000.attribute = attribute();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceDeleteAttributeStatement(ASTresource resource) throws ParseException {
 /*@bgen(jjtree) alterResourceDeleteAttributeStatement */
    ASTalterResourceDeleteAttributeStatement jjtn000 = new ASTalterResourceDeleteAttributeStatement(this, JJTALTERRESOURCEDELETEATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resource = resource;
    try {
      jjtn000.attributeName = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 4.1 ResourceClass Permissions /////////////////////////////////////////////
  final public void alterResourceClassAddPermissionsStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassAddPermissionsStatement */
    ASTalterResourceClassAddPermissionsStatement jjtn000 = new ASTalterResourceClassAddPermissionsStatement(this, JJTALTERRESOURCECLASSADDPERMISSIONSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jj_consume_token(LPAREN);
      jjtn000.permissions = permissionList();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void alterResourceClassDeletePermissionsStatement(ASTresourceClass resourceClass) throws ParseException {
 /*@bgen(jjtree) alterResourceClassDeletePermissionsStatement */
    ASTalterResourceClassDeletePermissionsStatement jjtn000 = new ASTalterResourceClassDeletePermissionsStatement(this, JJTALTERRESOURCECLASSDELETEPERMISSIONSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.resourceClass = resourceClass;
    try {
      jj_consume_token(LPAREN);
      jjtn000.permissions = permissionList();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findGrantsForResourceClassStatement() throws ParseException {
 /*@bgen(jjtree) findGrantsForResourceClassStatement */
  ASTfindGrantsForResourceClassStatement jjtn000 = new ASTfindGrantsForResourceClassStatement(this, JJTFINDGRANTSFORRESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.resourceClass = resourceClass();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 4.2 Subject Roles /////////////////////////////////////////////////////////
  final public void grantRoleStatement() throws ParseException {
 /*@bgen(jjtree) grantRoleStatement */
  ASTgrantRoleStatement jjtn000 = new ASTgrantRoleStatement(this, JJTGRANTROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.role = role();
      jj_consume_token(TO);
      jjtn000.subject = subject();
      switch (jj_nt.kind) {
      case WITH:
        jj_consume_token(WITH);
        jj_consume_token(GRANT);
        jj_consume_token(OPTION);
            jjtn000.canGrant = true;
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void revokeRoleStatement() throws ParseException {
 /*@bgen(jjtree) revokeRoleStatement */
  ASTrevokeRoleStatement jjtn000 = new ASTrevokeRoleStatement(this, JJTREVOKEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.role = role();
      jj_consume_token(FROM);
      jjtn000.subject = subject();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findRolesStatement(boolean direct) throws ParseException {
 /*@bgen(jjtree) findRolesStatement */
    ASTfindRolesStatement jjtn000 = new ASTfindRolesStatement(this, JJTFINDROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);jjtn000.direct = direct;
    try {
      jjtn000.subject = subject();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findGrantsForSubjectStatement() throws ParseException {
 /*@bgen(jjtree) findGrantsForSubjectStatement */
  ASTfindGrantsForSubjectStatement jjtn000 = new ASTfindGrantsForSubjectStatement(this, JJTFINDGRANTSFORSUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.subject = subject();
      switch (jj_nt.kind) {
      case ON:
        jj_consume_token(ON);
        jjtn000.resource = resource();
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findGrantsForRoleStatement() throws ParseException {
 /*@bgen(jjtree) findGrantsForRoleStatement */
  ASTfindGrantsForRoleStatement jjtn000 = new ASTfindGrantsForRoleStatement(this, JJTFINDGRANTSFORROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.role = role();
      switch (jj_nt.kind) {
      case ON:
        jj_consume_token(ON);
        jjtn000.resource = resource();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 4.3 Role Permissions on Resources /////////////////////////////////////////
  final public void grantPermissionStatement() throws ParseException {
 /*@bgen(jjtree) grantPermissionStatement */
  ASTgrantPermissionStatement jjtn000 = new ASTgrantPermissionStatement(this, JJTGRANTPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.permission = permission();
      jj_consume_token(ON);
      jjtn000.resource = resource();
      switch (jj_nt.kind) {
      case RECURSIVE:
        jj_consume_token(RECURSIVE);
            jjtn000.recursive = true;
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      jj_consume_token(TO);
      jjtn000.role = role();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void revokePermissionStatement() throws ParseException {
 /*@bgen(jjtree) revokePermissionStatement */
  ASTrevokePermissionStatement jjtn000 = new ASTrevokePermissionStatement(this, JJTREVOKEPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.permission = permission();
      jj_consume_token(ON);
      jjtn000.resource = resource();
      jj_consume_token(FROM);
      jjtn000.role = role();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void findGrantsForResourceStatement() throws ParseException {
 /*@bgen(jjtree) findGrantsForResourceStatement */
  ASTfindGrantsForResourceStatement jjtn000 = new ASTfindGrantsForResourceStatement(this, JJTFINDGRANTSFORRESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.resource = resource();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// 5.0 Impersonation /////////////////////////////////////////////////////////

// whoamiStatement node is defined inline in statement() non-terminal
  final public void impersonateStatement() throws ParseException {
 /*@bgen(jjtree) impersonateStatement */
  ASTimpersonateStatement jjtn000 = new ASTimpersonateStatement(this, JJTIMPERSONATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STRING:
      case NUMBER:
      case QUOTED_STRING:
        jjtn000.subject = subject();
        break;
      case SELF:
        jj_consume_token(SELF);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// Miscelenaous statements ///////////////////////////////////////////////////
  final public void echoStatement() throws ParseException {
 /*@bgen(jjtree) echoStatement */
  ASTechoStatement jjtn000 = new ASTechoStatement(this, JJTECHOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jjtn000.message = name();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  public RMLTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[93];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x8004040,0x824000,0x0,0x0,0x0,0x0,0x824000,0x8004040,0x0,0x0,0x14240100,0x14240100,0x0,0x14240100,0x10000,0x1000,0x10000,0x1001000,0x10000,0x0,0x0,0x10000,0x1000,0x80000,0x20080000,0x1000,0x1000,0x22000000,0x200180,0x200080,0x1000,0x200000,0x10000,0x1000,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x100000,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400800,0x400800,0x0,0x0,0x0,0x2000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x40900020,0x0,0x0,0x0,0x0,0x40900020,0x0,0x0,0x0,0x1000011,0x1000011,0x0,0x1000011,0x0,0x82440000,0x0,0x86440002,0x0,0x82400000,0x4000000,0x0,0x82440000,0x144,0x144,0x80000,0x80000,0x100,0x20000000,0x20000000,0x30100,0x20000000,0x0,0x82440000,0x2040000,0x2040000,0x200,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x80000,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000,0x0,0x400,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x8000,0x8000000,0x0,0x200000,0x200,0x0,0x1000,0x1000,0x200000,0x10000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x28000,0x38000,0x38000,0x0,0x10,0x40000,0x100000,0x100000,0x100000,0x10,0x0,0x100000,0x100000,0x20000800,0x800,0x20000000,0x800,0x28000,0x0,0x0,0x9,0x38000,0x0,0x9,0x38000,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x38000,0x0,0x0,0x0,0x28000,0x0,0x38000,0x28000,0x28000,0x0,0x4,0x0,0x0,0x38000,0x28000,0x80,0x100,0x38000,0x1,0x38000,0x0,0x38000,0x0,0x0,0x68000,0x68000,0x1fe00000,0x28000,0x18000,0x38000,0x6000000,0x18000000,0x1e000000,0x18000,0x38000,0x1e00000,0x18000,0x38000,0x0,0x100000,0x0,0x0,0x100000,0x100000,0x38000,0x0,0x0,0x400,0x0,0x0,0x38000,0x0,0x38000,0x200,0x0,0x0,0x0,0x38000,};
   }

  public RML(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RMLTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 93; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 93; i++) jj_la1[i] = -1;
  }

  public RML(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RMLTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 93; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 93; i++) jj_la1[i] = -1;
  }

  public RML(RMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 93; i++) jj_la1[i] = -1;
  }

  public void ReInit(RMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 93; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[94];
    for (int i = 0; i < 94; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 93; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
