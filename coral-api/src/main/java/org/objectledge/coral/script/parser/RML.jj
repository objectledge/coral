/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /home/fil/eclipse/ledge/coral-api/target/javacc/org/objectledge/coral/script/parser/RML.jj */
/*@egen*/options 
{
    UNICODE_INPUT = true;
    JAVA_UNICODE_ESCAPE = true;

    CACHE_TOKENS = true;
    OPTIMIZE_TOKEN_MANAGER = true;
    
    STATIC = false;                                                                                               
}

PARSER_BEGIN(RML)

package org.objectledge.coral.script.parser;

import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;

import java.util.ArrayList;

public class RML/*@bgen(jjtree)*/implements RMLTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTRMLState jjtree = new JJTRMLState();

/*@egen*/
    private String unquote(String str)
    {
        char[] c = str.toCharArray();
        StringBuffer out = new StringBuffer();
        for(int i=1; i<c.length-1; i++)
        {
            if(c[i] != '\\')
            {
                out.append(c[i]);
            }
            else
            {
                out.append(c[++i]);
            }
        }
        return out.toString();
    }
    
    void jjtreeOpenNodeScope(Node n)
    {
        ((SimpleNode)n).firstToken = getToken(1);
    }
    
    void jjtreeCloseNodeScope(Node n)
    {
        ((SimpleNode)n).lastToken = getToken(0);
    }
}

PARSER_END(RML)

/* Whitespace & comments */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <COMMENT : "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/* Reserved words */
TOKEN:
{
    <ABSTRACT : "ABSTRACT"> |
    <ADD : "ADD"> |
    <ALTER : "ALTER"> |
    <AND : "AND"> |
    <AS : "AS"> |
    <ASC : "ASC"> |
    <ATTRIBUTE : "ATTRIBUTE"> |
    <ATTRIBUTES : "ATTRIBUTES"> |
    <BUILTIN : "BUILTIN"> |
    <BY : "BY"> |
    <CLASS : "CLASS"> |
    <CLASS_UNIQUE : "CLASS_UNIQUE"> |
    <CREATE : "CREATE"> |
    <DB : "DB" > |
    <DEFINED : "DEFINED" > |
    <DELETE : "DELETE"> |
    <DESC : "DESC"> |
    <DESCRIPTIVE : "DESCRIPTIVE"> |
    <DIRECT : "DIRECT"> |     
    <DOMAIN : "DOMAIN"> |
    <ECHO : "ECHO"> |
    <FINAL : "FINAL"> |
    <FIND : "FIND"> |
    <FLAGS : "FLAGS"> |
    <FOR : "FOR"> |
    <FROM : "FROM"> |
    <GRANT : "GRANT"> |
    <GRANTS : "GRANTS"> |
    <HANDLER: "HANDLER"> |
    <ID : "ID"> |
    <IMPERSONATE : "IMPERSONATE"> |
    <INDEXABLE : "INDEXABLE"> |
    <JAVA : "JAVA"> |
    <LIKE : "LIKE"> |
    <NAME : "NAME"> |
    <NONE : "NONE"> |
    <NOT : "NOT"> |
    <OF : "OF"> |
    <ON : "ON"> |
    <OR : "OR"> |
    <OPTION : "OPTION"> |
    <ORDER : "ORDER"> |
    <OWNER : "OWNER"> |
    <PARENT : "PARENT"> |
    <PERMISSION : "PERMISSION"> |
    <PERMISSIONS : "PERMISSIONS"> |
    <READONLY: "READONLY"> |
    <RECURSIVE : "RECURSIVE"> |
    <RESOURCE : "RESOURCE"> |
    <REQUIRED : "REQUIRED"> |
    <REVOKE : "REVOKE"> |
    <ROLE : "ROLE"> |
    <ROLES : "ROLES"> |
    <SELECT : "SELECT"> |
    <SELF : "SELF"> |
    <SET : "SET"> |
    <SIBLINGS_UNIQUE : "SIBLINGS_UNIQUE"> |
    <SUBJECT : "SUBJECT"> |
    <SUBROLES : "SUBROLES"> |
    <SUPERCLASS : "SUPERCLASS"> |
    <SUPERCLASSES : "SUPERCLASSES"> |
    <SUPERROLES : "SUPERROLES"> |
    <SYNTHETIC : "SYNTHETIC"> |
    <TABLE : "TABLE"> |
    <TO : "TO"> |
    <VALUE : "VALUE"> |
    <VALUES : "VALUES"> |
    <WITH : "WITH"> |
    <WHERE : "WHERE"> |
    <WHOAMI : "WHOAMI">
}

/* Literals */
TOKEN :
{
    <#DIGIT : ["0"-"9"]> |
    <#LETTER : ["a"-"z","A"-"Z","_","."]> |
    <#PATHMETA : ["/","*"]> |
    <STRING : ( <LETTER> | <PATHMETA> ) (<LETTER> | <DIGIT> | <PATHMETA>)*> |
    <NUMBER : (<DIGIT>)+> |
    <QUOTED_STRING : "'" ( ~["'","\\"] | "\\'" | "\\\\" )* "'"> 
}

/* Separators */
TOKEN:
{
    <LPAREN : "("> |
    <RPAREN : ")"> |
    <COMMA : ",">
}

/* Operators */
TOKEN:
{
    <LESS : "<"> |
    <LESS_EQUALS : "<="> |
    <GREATER : ">"> |
    <GREATER_EQUALS : ">="> |
    <EQUALS : "="> |
    <DOUBLE_EQUALS : "=="> |
    <NOT_EQUALS : "!="> |
    <SQL_NOT_EQUALS : "<>">
}

// Identifiers ///////////////////////////////////////////////////////////////

String name()       :
{
    Token t;
    String value;
}
{
   ( 
       t = <STRING> 
       { 
           value = t.image; 
       } |
       t = <QUOTED_STRING> 
       { 
           value = unquote(t.image);
       } 
   )
   {
       return value;
   }
}

String value()       :
{
    Token t;
    String value;
}
{
   ( 
       t = <STRING> 
       { 
           value = t.image; 
       } |
       t = <QUOTED_STRING> 
       { 
           value = unquote(t.image); 
       } |
       t = <NUMBER> { value = t.image;} 
   )
   {
       return value;
   }
}


long id()       :
{
    Token id;
}
{
    id = <NUMBER>
    {
        long value = Long.parseLong(id.image);
        return value;
    }
}           

// Entities //////////////////////////////////////////////////////////////////

void entitySpecifier(SimpleNode node)       :
{
}
{
	node.entityName = name() |
	node.entityId = id()
}

ASTattributeClass attributeClass() :
{/*@bgen(jjtree) attributeClass */
  ASTattributeClass jjtn000 = new ASTattributeClass(this, JJTATTRIBUTECLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) attributeClass */
        try {
/*@egen*/
	entitySpecifier(jjtn000)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
        return jjtn000; 
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTresourceClass resourceClass() :
{/*@bgen(jjtree) resourceClass */
  ASTresourceClass jjtn000 = new ASTresourceClass(this, JJTRESOURCECLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) resourceClass */
        try {
/*@egen*/
	entitySpecifier(jjtn000)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
        return jjtn000; 
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTsubject subject() :
{/*@bgen(jjtree) subject */
  ASTsubject jjtn000 = new ASTsubject(this, JJTSUBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) subject */
        try {
/*@egen*/
	entitySpecifier(jjtn000)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
        return jjtn000; 
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTrole role() :
{/*@bgen(jjtree) role */
  ASTrole jjtn000 = new ASTrole(this, JJTROLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) role */
        try {
/*@egen*/
	entitySpecifier(jjtn000)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
        return jjtn000; 
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTpermission permission() :
{/*@bgen(jjtree) permission */
  ASTpermission jjtn000 = new ASTpermission(this, JJTPERMISSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) permission */
        try {
/*@egen*/
	entitySpecifier(jjtn000)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
        return jjtn000; 
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTresource resource() :
{/*@bgen(jjtree) resource */
  ASTresource jjtn000 = new ASTresource(this, JJTRESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) resource */
        try {
/*@egen*/
	entitySpecifier(jjtn000)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
        return jjtn000; 
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

// Lexical entities //////////////////////////////////////////////////////////

ASTresourceClassFlag resourceClassFlag() :
{/*@bgen(jjtree) resourceClassFlag */
    ASTresourceClassFlag jjtn000 = new ASTresourceClassFlag(this, JJTRESOURCECLASSFLAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    Token flag;
}
{/*@bgen(jjtree) resourceClassFlag */
    try {
/*@egen*/
    ( 
        flag = "ABSTRACT" | 
        flag = "FINAL" | 
        flag = "BUILTIN" 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        jjtn000.value = flag.image;
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTattributeFlag attributeFlag() :
{/*@bgen(jjtree) attributeFlag */
    ASTattributeFlag jjtn000 = new ASTattributeFlag(this, JJTATTRIBUTEFLAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    Token flag;
}
{/*@bgen(jjtree) attributeFlag */
    try {
/*@egen*/
    ( 
        flag = "REQUIRED" | 
        flag = "READONLY" | 
        flag = "DESCRIPTIVE" | 
        flag = "BUILTIN" | 
        flag = "INDEXABLE" | 
        flag = "CLASS_UNIQUE" | 
        flag = "SIBLINGS_UNIQUE" | 
        flag = "SYNTHETIC" 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        jjtn000.value = flag.image;
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTattributeDefinition attributeDefinition() :
{/*@bgen(jjtree) attributeDefinition */
  ASTattributeDefinition jjtn000 = new ASTattributeDefinition(this, JJTATTRIBUTEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) attributeDefinition */
    try {
/*@egen*/
    jjtn000.attributeFlags = attributeFlagList() jjtn000.attributeClass = attributeClass() 
    [ <LPAREN> 
        jjtn000.domain = name() 
    <RPAREN> ]
    jjtn000.attributeName = name()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/       
}

ASTattribute attribute() :
{/*@bgen(jjtree) attribute */
  ASTattribute jjtn000 = new ASTattribute(this, JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) attribute */
    try {
/*@egen*/
    jjtn000.attributeName = name() <EQUALS> jjtn000.value = value()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// Entity lists //////////////////////////////////////////////////////////////

ASTresourceClassList resourceClassList() :
{/*@bgen(jjtree) resourceClassList */
  ASTresourceClassList jjtn000 = new ASTresourceClassList(this, JJTRESOURCECLASSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) resourceClassList */
    try {
/*@egen*/
    ( 
        resourceClass() 
        ( <COMMA> resourceClass() )* 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTroleList roleList() :
{/*@bgen(jjtree) roleList */
  ASTroleList jjtn000 = new ASTroleList(this, JJTROLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) roleList */
    try {
/*@egen*/
    ( 
        role() 
        ( <COMMA> role() )* 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTpermissionList permissionList() :
{/*@bgen(jjtree) permissionList */
  ASTpermissionList jjtn000 = new ASTpermissionList(this, JJTPERMISSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) permissionList */
    try {
/*@egen*/
    ( 
        permission()
        ( <COMMA> permission() )* 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTattributeFlagList attributeFlagList() :
{/*@bgen(jjtree) attributeFlagList */
  ASTattributeFlagList jjtn000 = new ASTattributeFlagList(this, JJTATTRIBUTEFLAGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) attributeFlagList */
    try {
/*@egen*/
    ( attributeFlag() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/       
}

ASTresourceClassFlagList resourceClassFlagList() :
{/*@bgen(jjtree) resourceClassFlagList */
  ASTresourceClassFlagList jjtn000 = new ASTresourceClassFlagList(this, JJTRESOURCECLASSFLAGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) resourceClassFlagList */
    try {
/*@egen*/
    ( resourceClassFlag() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/       
}

ASTattributeDefinitionList attributeDefinitionList() :
{/*@bgen(jjtree) attributeDefinitionList */
  ASTattributeDefinitionList jjtn000 = new ASTattributeDefinitionList(this, JJTATTRIBUTEDEFINITIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) attributeDefinitionList */
    try {
/*@egen*/
    ( 
        attributeDefinition() 
        ( <COMMA> attributeDefinition() )* 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTattributeList attributeList() :
{/*@bgen(jjtree) attributeList */
  ASTattributeList jjtn000 = new ASTattributeList(this, JJTATTRIBUTELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) attributeList */
    try {
/*@egen*/
    ( 
        attribute()
        ( <COMMA> attribute() )* 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// Statement groups //////////////////////////////////////////////////////////

ASTscript script() :
{/*@bgen(jjtree) script */
  ASTscript jjtn000 = new ASTscript(this, JJTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) script */
    try {
/*@egen*/
    (
        ( 
            [ statement() ] ";" 
        )* 
        <EOF>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    { 
    	return jjtn000; 
  	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void singleStatement() :
{/*@bgen(jjtree) singleStatement */
  ASTsingleStatement jjtn000 = new ASTsingleStatement(this, JJTSINGLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) singleStatement */
    try {
/*@egen*/
    statement() [ ";" ] <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// Statements ////////////////////////////////////////////////////////////////

void statement()       :
{
}
{
    ( "CREATE" createStatement() ) |
    ( "FIND" findStatement() ) |
    ( "ALTER" alterStatement() ) |
    ( "DELETE" deleteStatement() ) |
    ( "GRANT" grantStatement() ) |
    ( "REVOKE" revokeStatement() ) |
    ( "ECHO" echoStatement() ) |
    ( "IMPERSONATE" impersonateStatement() ) |
    (/*@bgen(jjtree) whoamiStatement */
      {
        ASTwhoamiStatement jjtn001 = new ASTwhoamiStatement(this, JJTWHOAMISTATEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/ "WHOAMI"/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/ )
}

void createStatement()       :
{
}
{
    ( "ATTRIBUTE" "CLASS" createAttributeClassStatement() ) |
    ( "SUBJECT" createSubjectStatement() ) |
    ( "ROLE" createRoleStatement() ) |
    ( "PERMISSION" createPermissionStatement() ) |
    ( "RESOURCE" (
        ( "CLASS" createResourceClassStatement() ) |
        createResourceStatement() )
    )                         
}

void findStatement()       :
{
}
{
    ( "ATTRIBUTE" "CLASS" findAttributeClassStatement() ) |
    ( "SUBJECT" findSubjectStatement() ) |
    ( "ROLE" findRoleStatement() ) |
    ( "PERMISSION" findPermissionStatement() ) |
    ( "RESOURCE" (
        ("CLASS" findResourceClassStatement() ) |
        findResourceStatement() )
    ) |
    ( "GRANTS" "FOR" findGrantsForStatement() ) |
    ( "DIRECT" findDirectStatement() ) |
    ( "SUPERROLES" "OF" findSuperrolesStatement(false) ) |
    ( "SUBROLES" "OF" findSubrolesStatement(false) ) |
    ( "ROLES" "OF" findRolesStatement(false) )
}

void findGrantsForStatement()       : 
{
}
{
   ( "SUBJECT" findGrantsForSubjectStatement() ) |
   ( "ROLE" findGrantsForRoleStatement() ) |
   ( "RESOURCE" (
       ( "CLASS" findGrantsForResourceClassStatement() ) |
       findGrantsForResourceStatement() )
   )
}

void findDirectStatement()       :
{
}
{
    ( "SUPERROLES" "OF" findSuperrolesStatement(true) ) |
    ( "SUBROLES" "OF" findSubrolesStatement(true) ) |
    ( "ROLES" "OF" findRolesStatement(true) ) 
}

void alterStatement()       :
{
}
{
   ( "ATTRIBUTE" "CLASS" alterAttributeClassStatement() ) |
   ( "SUBJECT" alterSubjectStatement() ) |
   ( "ROLE" alterRoleStatement() ) |
   ( "PERMISSION" alterPermissionStatement() ) |
   ( "RESOURCE" (
       ( "CLASS" alterResourceClassStatement() ) |
       alterResourceStatement())
   )
}

void alterAttributeClassStatement()       :
{
    ASTattributeClass ac;
}
{
    ac = attributeClass() "SET" 
    (
        ( "NAME" alterAttributeClassSetNameStatement(ac) ) |
        ( "JAVA" "CLASS" alterAttributeClassSetJavaClassStatement(ac) ) |
        ( "HANDLER" "CLASS" alterAttributeClassSetHandlerClassStatement(ac) ) |
        ( "DB" "TABLE" alterAttributeClassSetDbTableStatement(ac) )
    )
}

void alterResourceClassStatement()       :
{
    ASTresourceClass rc;
    String attr;
}
{
    rc = resourceClass() 
    ( 
        "SET" 
        (
            ( "NAME" alterResourceClassSetNameStatement(rc) ) |
            ( "JAVA" "CLASS" alterResourceClassSetJavaClassStatement(rc) ) |
            ( "HANDLER" "CLASS" alterResourceClassSetHandlerClassStatement(rc) ) |
            ( "DB" "TABLE" alterResourceClassSetDbTableStatement(rc) ) |
            ( "FLAGS" alterResourceClassSetFlagsStatement(rc) )
        ) |
        "ADD" 
        (
            ( "ATTRIBUTE" alterResourceClassAddAttributeStatement(rc) ) |
            ( "SUPERCLASS" alterResourceClassAddSuperclassStatement(rc) ) |
            ( "PERMISSIONS" alterResourceClassAddPermissionsStatement(rc) )
        ) |
        "DELETE" 
        (
            ( "ATTRIBUTE" alterResourceClassDeleteAttributeStatement(rc) ) |
            ( "SUPERCLASS" alterResourceClassDeleteSuperclassStatement(rc) ) |
            ( "PERMISSIONS" alterResourceClassDeletePermissionsStatement(rc) )
        ) |
        "ALTER" "ATTRIBUTE" attr=name() "SET" 
        (
            ( "NAME" alterResourceClassAlterAttributeSetNameStatement(rc, attr) ) |
            ( "FLAGS" alterResourceClassAlterAttributeSetFlagsStatement(rc, attr) ) |
            ( "DOMAIN" alterResourceClassAlterAttributeSetDomainStatement(rc, attr) )
        )
    ) 
}

void alterSubjectStatement()       :
{
    ASTsubject subject;
}
{
    subject = subject() "SET" 
    (
        "NAME" alterSubjectSetNameStatement(subject)
    ) 
}

void alterRoleStatement()       :
{
    ASTrole role;
}
{
    role = role() 
    (
        ( "SET" "NAME" alterRoleSetNameStatement(role) ) |
        ( "ADD" "SUBROLES" alterRoleAddSubrolesStatement(role) ) |
        ( "DELETE" "SUBROLES" alterRoleDeleteSubrolesStatement(role) )
    ) 
}

void alterPermissionStatement()       :
{
    ASTpermission permission;
}
{
    permission = permission() "SET" "NAME" alterPermissionSetNameStatement(permission)
}

void alterResourceStatement()       :
{
    ASTresource resource;
}
{
    resource=resource() 
    ( 
        "SET" 
        (
            ( "NAME" alterResourceSetNameStatement(resource) ) |
            ( "PARENT" alterResourceSetParentStatement(resource) ) |
            ( "OWNER" alterResourceSetOwnerStatement(resource) ) |
            ( "ATTRIBUTE" alterResourceSetAttributeStatement(resource) )
        ) |
        ( "DELETE" "ATTRIBUTE" alterResourceDeleteAttributeStatement(resource) )
    )
}

void deleteStatement()       :
{
}
{
    ( "ATTRIBUTE" "CLASS" deleteAttributeClassStatement() ) |
    ( "SUBJECT" deleteSubjectStatement() ) |
    ( "ROLE" deleteRoleStatement() ) |
    ( "PERMISSION" deletePermissionStatement() ) |
    ( "RESOURCE" (
        ( "CLASS" deleteResourceClassStatement() ) |
        deleteResourceStatement() )
    )
}

void grantStatement()       :
{
}
{
    ( "ROLE" grantRoleStatement() ) |
    ( "PERMISSION" grantPermissionStatement() )
}

void revokeStatement()       :
{
}
{
    ( "ROLE" revokeRoleStatement() ) |
    ( "PERMISSION" revokePermissionStatement() )
}

// 1.1 Attribute classes /////////////////////////////////////////////////////

void createAttributeClassStatement() :
{/*@bgen(jjtree) createAttributeClassStatement */
  ASTcreateAttributeClassStatement jjtn000 = new ASTcreateAttributeClassStatement(this, JJTCREATEATTRIBUTECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) createAttributeClassStatement */
    try {
/*@egen*/
    jjtn000.name=name() 
    "JAVA" "CLASS" jjtn000.javaClass = name()
    "HANDLER" "CLASS" jjtn000.handlerClass = name()
    [ 
        "DB" "TABLE" 
        ( 
            jjtn000.dbTable = name() | 
            "NONE" 
        ) 
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findAttributeClassStatement() :
{/*@bgen(jjtree) findAttributeClassStatement */
  ASTfindAttributeClassStatement jjtn000 = new ASTfindAttributeClassStatement(this, JJTFINDATTRIBUTECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findAttributeClassStatement */
    try {
/*@egen*/
    [ entitySpecifier(jjtn000) ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void deleteAttributeClassStatement() :
{/*@bgen(jjtree) deleteAttributeClassStatement */
  ASTdeleteAttributeClassStatement jjtn000 = new ASTdeleteAttributeClassStatement(this, JJTDELETEATTRIBUTECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) deleteAttributeClassStatement */
    try {
/*@egen*/
    jjtn000.attributeClass = attributeClass()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterAttributeClassSetNameStatement(ASTattributeClass attributeClass) :
{/*@bgen(jjtree) alterAttributeClassSetNameStatement */
    ASTalterAttributeClassSetNameStatement jjtn000 = new ASTalterAttributeClassSetNameStatement(this, JJTALTERATTRIBUTECLASSSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.attributeClass = attributeClass;
}
{/*@bgen(jjtree) alterAttributeClassSetNameStatement */
    try {
/*@egen*/
    jjtn000.newName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterAttributeClassSetJavaClassStatement(ASTattributeClass attributeClass) :
{/*@bgen(jjtree) alterAttributeClassSetJavaClassStatement */
    ASTalterAttributeClassSetJavaClassStatement jjtn000 = new ASTalterAttributeClassSetJavaClassStatement(this, JJTALTERATTRIBUTECLASSSETJAVACLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.attributeClass = attributeClass;
}
{/*@bgen(jjtree) alterAttributeClassSetJavaClassStatement */
    try {
/*@egen*/
    jjtn000.javaClass = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterAttributeClassSetHandlerClassStatement(ASTattributeClass attributeClass) :
{/*@bgen(jjtree) alterAttributeClassSetHandlerClassStatement */
    ASTalterAttributeClassSetHandlerClassStatement jjtn000 = new ASTalterAttributeClassSetHandlerClassStatement(this, JJTALTERATTRIBUTECLASSSETHANDLERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.attributeClass = attributeClass;
}
{/*@bgen(jjtree) alterAttributeClassSetHandlerClassStatement */
    try {
/*@egen*/
    jjtn000.handlerClass=name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterAttributeClassSetDbTableStatement(ASTattributeClass attributeClass) :
{/*@bgen(jjtree) alterAttributeClassSetDbTableStatement */
    ASTalterAttributeClassSetDbTableStatement jjtn000 = new ASTalterAttributeClassSetDbTableStatement(this, JJTALTERATTRIBUTECLASSSETDBTABLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.attributeClass = attributeClass;
}
{/*@bgen(jjtree) alterAttributeClassSetDbTableStatement */
    try {
/*@egen*/
    ( 
        jjtn000.dbTable = name() | 
        "NONE" 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 2.1 Resource classes //////////////////////////////////////////////////////

void createResourceClassStatement() :
{/*@bgen(jjtree) createResourceClassStatement */
  ASTcreateResourceClassStatement jjtn000 = new ASTcreateResourceClassStatement(this, JJTCREATERESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) createResourceClassStatement */
    try {
/*@egen*/
    jjtn000.resourceClassFlags = resourceClassFlagList() jjtn000.name = name() 
    "JAVA" "CLASS" jjtn000.javaClass = name()
    "HANDLER" "CLASS" jjtn000.handlerClass = name()
    [ 
        "DB" "TABLE" 
        ( 
            jjtn000.dbTable = name() | 
            "NONE" 
        ) 
    ]
    [ "SUPERCLASSES" <LPAREN> 
        jjtn000.superClasses = resourceClassList() 
    <RPAREN> ]
    [ "ATTRIBUTES" <LPAREN> 
        jjtn000.attributeDefinitions = attributeDefinitionList() 
    <RPAREN> ]
    [ "PERMISSIONS" <LPAREN> 
        jjtn000.permissions = permissionList() 
    <RPAREN> ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findResourceClassStatement() :
{/*@bgen(jjtree) findResourceClassStatement */
  ASTfindResourceClassStatement jjtn000 = new ASTfindResourceClassStatement(this, JJTFINDRESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findResourceClassStatement */
    try {
/*@egen*/
    [ entitySpecifier(jjtn000) ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void deleteResourceClassStatement() :
{/*@bgen(jjtree) deleteResourceClassStatement */
  ASTdeleteResourceClassStatement jjtn000 = new ASTdeleteResourceClassStatement(this, JJTDELETERESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) deleteResourceClassStatement */
    try {
/*@egen*/
    jjtn000.resourceClass = resourceClass()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassSetNameStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassSetNameStatement */
    ASTalterResourceClassSetNameStatement jjtn000 = new ASTalterResourceClassSetNameStatement(this, JJTALTERRESOURCECLASSSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassSetNameStatement */
     try {
/*@egen*/
     jjtn000.newName = name()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
}

void alterResourceClassSetJavaClassStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassSetJavaClassStatement */
    ASTalterResourceClassSetJavaClassStatement jjtn000 = new ASTalterResourceClassSetJavaClassStatement(this, JJTALTERRESOURCECLASSSETJAVACLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassSetJavaClassStatement */
    try {
/*@egen*/
    jjtn000.javaClass = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassSetHandlerClassStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassSetHandlerClassStatement */
    ASTalterResourceClassSetHandlerClassStatement jjtn000 = new ASTalterResourceClassSetHandlerClassStatement(this, JJTALTERRESOURCECLASSSETHANDLERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassSetHandlerClassStatement */
    try {
/*@egen*/
    jjtn000.handlerClass = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassSetDbTableStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassSetDbTableStatement */
    ASTalterResourceClassSetDbTableStatement jjtn000 = new ASTalterResourceClassSetDbTableStatement(this, JJTALTERRESOURCECLASSSETDBTABLESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassSetDbTableStatement */
    try {
/*@egen*/
    ( 
        jjtn000.dbTable = name() | 
        "NONE" 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassSetFlagsStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassSetFlagsStatement */
    ASTalterResourceClassSetFlagsStatement jjtn000 = new ASTalterResourceClassSetFlagsStatement(this, JJTALTERRESOURCECLASSSETFLAGSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;    
}
{/*@bgen(jjtree) alterResourceClassSetFlagsStatement */
     try {
/*@egen*/
     jjtn000.resourceClassFlags = resourceClassFlagList()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
     }
/*@egen*/
}

void alterResourceClassAlterAttributeSetNameStatement(ASTresourceClass resourceClass, String attr) :
{/*@bgen(jjtree) alterResourceClassAlterAttributeSetNameStatement */
    ASTalterResourceClassAlterAttributeSetNameStatement jjtn000 = new ASTalterResourceClassAlterAttributeSetNameStatement(this, JJTALTERRESOURCECLASSALTERATTRIBUTESETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
    jjtn000.attributeName = attr;
}
{/*@bgen(jjtree) alterResourceClassAlterAttributeSetNameStatement */
    try {
/*@egen*/
    jjtn000.newName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassAlterAttributeSetFlagsStatement(ASTresourceClass resourceClass, String attr) :
{/*@bgen(jjtree) alterResourceClassAlterAttributeSetFlagsStatement */
    ASTalterResourceClassAlterAttributeSetFlagsStatement jjtn000 = new ASTalterResourceClassAlterAttributeSetFlagsStatement(this, JJTALTERRESOURCECLASSALTERATTRIBUTESETFLAGSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
    jjtn000.attributeName = attr;
}
{/*@bgen(jjtree) alterResourceClassAlterAttributeSetFlagsStatement */
    try {
/*@egen*/
    jjtn000.attributeFlags = attributeFlagList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassAlterAttributeSetDomainStatement(ASTresourceClass resourceClass, String attr) :
{/*@bgen(jjtree) alterResourceClassAlterAttributeSetDomainStatement */
    ASTalterResourceClassAlterAttributeSetDomainStatement jjtn000 = new ASTalterResourceClassAlterAttributeSetDomainStatement(this, JJTALTERRESOURCECLASSALTERATTRIBUTESETDOMAINSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
    jjtn000.attributeName = attr;
}
{/*@bgen(jjtree) alterResourceClassAlterAttributeSetDomainStatement */
    try {
/*@egen*/
    jjtn000.domain = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassAddAttributeStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassAddAttributeStatement */
    ASTalterResourceClassAddAttributeStatement jjtn000 = new ASTalterResourceClassAddAttributeStatement(this, JJTALTERRESOURCECLASSADDATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassAddAttributeStatement */
    try {
/*@egen*/
    jjtn000.attributeDefinition = attributeDefinition() [ "VALUE" jjtn000.value = value() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassDeleteAttributeStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassDeleteAttributeStatement */
    ASTalterResourceClassDeleteAttributeStatement jjtn000 = new ASTalterResourceClassDeleteAttributeStatement(this, JJTALTERRESOURCECLASSDELETEATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassDeleteAttributeStatement */
    try {
/*@egen*/
    jjtn000.attributeName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassAddSuperclassStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassAddSuperclassStatement */
    ASTalterResourceClassAddSuperclassStatement jjtn000 = new ASTalterResourceClassAddSuperclassStatement(this, JJTALTERRESOURCECLASSADDSUPERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassAddSuperclassStatement */
    try {
/*@egen*/
    jjtn000.superClass = resourceClass() 
    [ "VALUES" <LPAREN> 
        jjtn000.attributeValues = attributeList() 
    <RPAREN> ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassDeleteSuperclassStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassDeleteSuperclassStatement */
    ASTalterResourceClassDeleteSuperclassStatement jjtn000 = new ASTalterResourceClassDeleteSuperclassStatement(this, JJTALTERRESOURCECLASSDELETESUPERCLASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassDeleteSuperclassStatement */
    try {
/*@egen*/
    jjtn000.superClass = resourceClass()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 2.1 Permissions ///////////////////////////////////////////////////////////

void createPermissionStatement() :
{/*@bgen(jjtree) createPermissionStatement */
  ASTcreatePermissionStatement jjtn000 = new ASTcreatePermissionStatement(this, JJTCREATEPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) createPermissionStatement */
    try {
/*@egen*/
    jjtn000.name = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findPermissionStatement() :
{/*@bgen(jjtree) findPermissionStatement */
  ASTfindPermissionStatement jjtn000 = new ASTfindPermissionStatement(this, JJTFINDPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findPermissionStatement */
    try {
/*@egen*/
    [ entitySpecifier(jjtn000) ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void deletePermissionStatement() :
{/*@bgen(jjtree) deletePermissionStatement */
  ASTdeletePermissionStatement jjtn000 = new ASTdeletePermissionStatement(this, JJTDELETEPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) deletePermissionStatement */
    try {
/*@egen*/
    jjtn000.permission = permission()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterPermissionSetNameStatement(ASTpermission perm) :
{/*@bgen(jjtree) alterPermissionSetNameStatement */
    ASTalterPermissionSetNameStatement jjtn000 = new ASTalterPermissionSetNameStatement(this, JJTALTERPERMISSIONSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.permission = perm;
}
{/*@bgen(jjtree) alterPermissionSetNameStatement */
    try {
/*@egen*/
    jjtn000.newName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 2.2 Roles /////////////////////////////////////////////////////////////////

void createRoleStatement() :
{/*@bgen(jjtree) createRoleStatement */
  ASTcreateRoleStatement jjtn000 = new ASTcreateRoleStatement(this, JJTCREATEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) createRoleStatement */
    try {
/*@egen*/
    jjtn000.name = name() 
    [ "SUBROLES" <LPAREN> 
        jjtn000.subRoles = roleList() 
    <RPAREN> ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findRoleStatement() :
{/*@bgen(jjtree) findRoleStatement */
  ASTfindRoleStatement jjtn000 = new ASTfindRoleStatement(this, JJTFINDROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findRoleStatement */
    try {
/*@egen*/
    [ entitySpecifier(jjtn000) ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void deleteRoleStatement() :
{/*@bgen(jjtree) deleteRoleStatement */
  ASTdeleteRoleStatement jjtn000 = new ASTdeleteRoleStatement(this, JJTDELETEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) deleteRoleStatement */
    try {
/*@egen*/
    jjtn000.role = role()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterRoleSetNameStatement(ASTrole role) :
{/*@bgen(jjtree) alterRoleSetNameStatement */
    ASTalterRoleSetNameStatement jjtn000 = new ASTalterRoleSetNameStatement(this, JJTALTERROLESETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.role = role;
}
{/*@bgen(jjtree) alterRoleSetNameStatement */
    try {
/*@egen*/
    jjtn000.newName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterRoleAddSubrolesStatement(ASTrole role) :
{/*@bgen(jjtree) alterRoleAddSubrolesStatement */
    ASTalterRoleAddSubrolesStatement jjtn000 = new ASTalterRoleAddSubrolesStatement(this, JJTALTERROLEADDSUBROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.role = role;
}
{/*@bgen(jjtree) alterRoleAddSubrolesStatement */
    try {
/*@egen*/
    <LPAREN> 
        jjtn000.subRoles = roleList() 
    <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterRoleDeleteSubrolesStatement(ASTrole role) :
{/*@bgen(jjtree) alterRoleDeleteSubrolesStatement */
    ASTalterRoleDeleteSubrolesStatement jjtn000 = new ASTalterRoleDeleteSubrolesStatement(this, JJTALTERROLEDELETESUBROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.role = role;
}
{/*@bgen(jjtree) alterRoleDeleteSubrolesStatement */
    try {
/*@egen*/
    <LPAREN> 
        jjtn000.subRoles = roleList() 
    <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findSubrolesStatement(boolean direct) :
{/*@bgen(jjtree) findSubrolesStatement */
    ASTfindSubrolesStatement jjtn000 = new ASTfindSubrolesStatement(this, JJTFINDSUBROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.direct = direct;
}
{/*@bgen(jjtree) findSubrolesStatement */
    try {
/*@egen*/
    jjtn000.role = role()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findSuperrolesStatement(boolean direct) :
{/*@bgen(jjtree) findSuperrolesStatement */
    ASTfindSuperrolesStatement jjtn000 = new ASTfindSuperrolesStatement(this, JJTFINDSUPERROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.direct = direct;
}
{/*@bgen(jjtree) findSuperrolesStatement */
    try {
/*@egen*/
    jjtn000.role = role()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 2.3 Subjects //////////////////////////////////////////////////////////////

void createSubjectStatement() :
{/*@bgen(jjtree) createSubjectStatement */
  ASTcreateSubjectStatement jjtn000 = new ASTcreateSubjectStatement(this, JJTCREATESUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) createSubjectStatement */
    try {
/*@egen*/
    jjtn000.name = name()
    [ "ROLE" <LPAREN> 
        jjtn000.roles = roleList() 
    <RPAREN> ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findSubjectStatement() :
{/*@bgen(jjtree) findSubjectStatement */
  ASTfindSubjectStatement jjtn000 = new ASTfindSubjectStatement(this, JJTFINDSUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findSubjectStatement */
    try {
/*@egen*/
    [ entitySpecifier(jjtn000) ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void deleteSubjectStatement() :
{/*@bgen(jjtree) deleteSubjectStatement */
  ASTdeleteSubjectStatement jjtn000 = new ASTdeleteSubjectStatement(this, JJTDELETESUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) deleteSubjectStatement */
    try {
/*@egen*/
    jjtn000.subject = subject()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterSubjectSetNameStatement(ASTsubject subject) :
{/*@bgen(jjtree) alterSubjectSetNameStatement */
    ASTalterSubjectSetNameStatement jjtn000 = new ASTalterSubjectSetNameStatement(this, JJTALTERSUBJECTSETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.subject = subject;
}
{/*@bgen(jjtree) alterSubjectSetNameStatement */
    try {
/*@egen*/
    jjtn000.newName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


// 3.0 Resources /////////////////////////////////////////////////////////////

// Resource query grammar ////////////////////////////////////////////////////

ASTconditionalExpression conditionalExpression() :
{/*@bgen(jjtree) conditionalExpression */
  ASTconditionalExpression jjtn000 = new ASTconditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) conditionalExpression */
    try {
/*@egen*/
    orExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void orExpression()       :
{
}
{/*@bgen(jjtree) #orExpression(> 1) */
    {
      ASTorExpression jjtn001 = new ASTorExpression(this, JJTOREXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( 
       andExpression() 
       ( "OR" andExpression() )* 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
}

void andExpression()       :
{
}
{/*@bgen(jjtree) #andExpression(> 1) */
    {
      ASTandExpression jjtn001 = new ASTandExpression(this, JJTANDEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( 
        simpleExpression() 
        ( "AND" simpleExpression() )* 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
}

void simpleExpression()       :
{
}
{
    notExpression() | 
    primaryExpression()
}

void notExpression() :
{/*@bgen(jjtree) notExpression */
  ASTnotExpression jjtn000 = new ASTnotExpression(this, JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) notExpression */
    try {
/*@egen*/
    "NOT" primaryExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void primaryExpression()       :
{
}
{
    condition() | 
    ( <LPAREN> 
        orExpression() 
    <RPAREN> )
}

void condition()       :
{
    String lhs;
}
{
    definedCondition() | 
    ( 
        lhs = name() 
        ( 
            equalityCondition(lhs) | 
            comparisonCondition(lhs) | 
            approximationCondition(lhs) 
        ) 
    )
}

void equalityCondition(String lhs) :
{/*@bgen(jjtree) equalityCondition */
    ASTequalityCondition jjtn000 = new ASTequalityCondition(this, JJTEQUALITYCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.lhs = lhs;
    Token t;
}
{/*@bgen(jjtree) equalityCondition */
    try {
/*@egen*/
    jjtn000.operator = equalityOperator() 
    ( 
        t = <QUOTED_STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/ 
        {
            jjtn000.literalRHS = true;
            jjtn000.rhs = unquote(t.image);
        } |
        ( 
            t=<NUMBER> | 
            t=<STRING> 
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
        {
            jjtn000.rhs = t.image;
        }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

int equalityOperator()       :
{
}
{
    ( 
        "=" | 
        "==" 
    )  
    {
        return RMLOperator.EQUALS;
    } |
    ( 
        "!=" | 
        "<>" 
    )
    {
        return RMLOperator.NOT_EQUALS;
    }
}

void comparisonCondition(String lhs) :
{/*@bgen(jjtree) comparisonCondition */
    ASTcomparisonCondition jjtn000 = new ASTcomparisonCondition(this, JJTCOMPARISONCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.lhs = lhs;
    Token t;
}
{/*@bgen(jjtree) comparisonCondition */
    try {
/*@egen*/
    jjtn000.operator = comparisonOperator()
    ( 
        t = <QUOTED_STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/ 
        {
            jjtn000.literalRHS = true;
            jjtn000.rhs = unquote(t.image);
        } |
        ( 
            t = <NUMBER> | 
            t = <STRING> 
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
        {
            jjtn000.rhs = t.image;
        }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

int comparisonOperator()       :
{
}
{
    "<" 
    {
        return RMLOperator.LESSER;
    } |
    ">" 
    {
        return RMLOperator.GREATER;
    } |
    "<=" 
    {
        return RMLOperator.LESSER_EQUALS;
    } |
    ">="
    {
        return RMLOperator.GREATER_EQUALS;
    }
}

void approximationCondition(String lhs) :
{/*@bgen(jjtree) approximationCondition */
    ASTapproximationCondition jjtn000 = new ASTapproximationCondition(this, JJTAPPROXIMATIONCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.lhs = lhs;
    Token t;
}
{/*@bgen(jjtree) approximationCondition */
    try {
/*@egen*/
    "LIKE"
    ( 
        t = <QUOTED_STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/ 
        {
            jjtn000.literalRHS = true;
            jjtn000.rhs = unquote(t.image);
        } |
        ( 
            t = <NUMBER> | 
            t = <STRING> 
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
        {
            jjtn000.rhs = t.image;
        }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void definedCondition() :
{/*@bgen(jjtree) definedCondition */
  ASTdefinedCondition jjtn000 = new ASTdefinedCondition(this, JJTDEFINEDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) definedCondition */
    try {
/*@egen*/
    "DEFINED" jjtn000.rhs = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTclassAndAliasSpecifier classAndAliasSpecifier() :
{/*@bgen(jjtree) classAndAliasSpecifier */
  ASTclassAndAliasSpecifier jjtn000 = new ASTclassAndAliasSpecifier(this, JJTCLASSANDALIASSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) classAndAliasSpecifier */
    try {
/*@egen*/
    jjtn000.resourceClass = resourceClass() [ "AS" jjtn000.alias = name() ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTclassAndAliasSpecifierList classAndAliasSpecifierList() :
{/*@bgen(jjtree) classAndAliasSpecifierList */
  ASTclassAndAliasSpecifierList jjtn000 = new ASTclassAndAliasSpecifierList(this, JJTCLASSANDALIASSPECIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) classAndAliasSpecifierList */
    try {
/*@egen*/
    classAndAliasSpecifier() ( <COMMA> classAndAliasSpecifier() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}           

ASTorderBySpecifier orderBySpecifier() :
{/*@bgen(jjtree) orderBySpecifier */
    ASTorderBySpecifier jjtn000 = new ASTorderBySpecifier(this, JJTORDERBYSPECIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.dir = true;
}
{/*@bgen(jjtree) orderBySpecifier */
    try {
/*@egen*/
    jjtn000.attributeName = name() 
    [ 
        "ASC" | 
        "DESC" 
        { 
            jjtn000.dir = false; 
        } 
    ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTorderByList orderByList() :
{/*@bgen(jjtree) orderByList */
  ASTorderByList jjtn000 = new ASTorderByList(this, JJTORDERBYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) orderByList */
    try {
/*@egen*/
    ( 
        orderBySpecifier()
        ( <COMMA> orderBySpecifier() )* 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTselectSpecifier selectSpecifier() :
{/*@bgen(jjtree) selectSpecifier */
  ASTselectSpecifier jjtn000 = new ASTselectSpecifier(this, JJTSELECTSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) selectSpecifier */
        try {
/*@egen*/
	jjtn000.attributeName = name()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

ASTselectList selectList() :
{/*@bgen(jjtree) selectList */
  ASTselectList jjtn000 = new ASTselectList(this, JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) selectList */
    try {
/*@egen*/
    ( 
        selectSpecifier()
        ( <COMMA> selectSpecifier() )* 
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

//////////////////////////////////////////////////////////////////////////////

void createResourceStatement() :
{/*@bgen(jjtree) createResourceStatement */
  ASTcreateResourceStatement jjtn000 = new ASTcreateResourceStatement(this, JJTCREATERESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) createResourceStatement */
    try {
/*@egen*/
    jjtn000.name = name()
    "RESOURCE" "CLASS" jjtn000.resourceClass = resourceClass()
    "PARENT" 
    ( 
        jjtn000.parentResource = resource() | 
        "NONE" 
    )
    [ "ATTRIBUTES" <LPAREN> 
        jjtn000.attributeValues = attributeList() 
    <RPAREN> ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

ASTfindResourceStatement findResourceStatement() :
{/*@bgen(jjtree) findResourceStatement */
  ASTfindResourceStatement jjtn000 = new ASTfindResourceStatement(this, JJTFINDRESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findResourceStatement */
    try {
/*@egen*/
    (
        jjtn000.resource = resource() | 
        (
            [ "FROM" jjtn000.from = classAndAliasSpecifierList() ] 
            [ "WHERE" jjtn000.where = conditionalExpression() ]
            [ "ORDER" "BY" jjtn000.orderBy = orderByList() ]
            [ "SELECT" jjtn000.select = selectList() ]
        )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void deleteResourceStatement() :
{/*@bgen(jjtree) deleteResourceStatement */
  ASTdeleteResourceStatement jjtn000 = new ASTdeleteResourceStatement(this, JJTDELETERESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) deleteResourceStatement */
    try {
/*@egen*/
    entitySpecifier(jjtn000)
    [ 
        "RECURSIVE" 
        { 
            jjtn000.recursive = true; 
        } 
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceSetNameStatement(ASTresource resource) :
{/*@bgen(jjtree) alterResourceSetNameStatement */
    ASTalterResourceSetNameStatement jjtn000 = new ASTalterResourceSetNameStatement(this, JJTALTERRESOURCESETNAMESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resource = resource;
}
{/*@bgen(jjtree) alterResourceSetNameStatement */
    try {
/*@egen*/
    jjtn000.newName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceSetParentStatement(ASTresource resource) :
{/*@bgen(jjtree) alterResourceSetParentStatement */
    ASTalterResourceSetParentStatement jjtn000 = new ASTalterResourceSetParentStatement(this, JJTALTERRESOURCESETPARENTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resource = resource;
}
{/*@bgen(jjtree) alterResourceSetParentStatement */
    try {
/*@egen*/
    jjtn000.parent = resource() | 
    "NONE"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceSetOwnerStatement(ASTresource resource) :
{/*@bgen(jjtree) alterResourceSetOwnerStatement */
    ASTalterResourceSetOwnerStatement jjtn000 = new ASTalterResourceSetOwnerStatement(this, JJTALTERRESOURCESETOWNERSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resource = resource;
}
{/*@bgen(jjtree) alterResourceSetOwnerStatement */
    try {
/*@egen*/
    jjtn000.owner = subject()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceSetAttributeStatement(ASTresource resource) :
{/*@bgen(jjtree) alterResourceSetAttributeStatement */
    ASTalterResourceSetAttributeStatement jjtn000 = new ASTalterResourceSetAttributeStatement(this, JJTALTERRESOURCESETATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resource = resource;
}
{/*@bgen(jjtree) alterResourceSetAttributeStatement */
    try {
/*@egen*/
    jjtn000.attribute = attribute()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceDeleteAttributeStatement(ASTresource resource) :
{/*@bgen(jjtree) alterResourceDeleteAttributeStatement */
    ASTalterResourceDeleteAttributeStatement jjtn000 = new ASTalterResourceDeleteAttributeStatement(this, JJTALTERRESOURCEDELETEATTRIBUTESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resource = resource;
}
{/*@bgen(jjtree) alterResourceDeleteAttributeStatement */
    try {
/*@egen*/
    jjtn000.attributeName = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 4.1 ResourceClass Permissions /////////////////////////////////////////////

void alterResourceClassAddPermissionsStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassAddPermissionsStatement */
    ASTalterResourceClassAddPermissionsStatement jjtn000 = new ASTalterResourceClassAddPermissionsStatement(this, JJTALTERRESOURCECLASSADDPERMISSIONSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassAddPermissionsStatement */
    try {
/*@egen*/
    <LPAREN> 
        jjtn000.permissions = permissionList() 
    <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void alterResourceClassDeletePermissionsStatement(ASTresourceClass resourceClass) :
{/*@bgen(jjtree) alterResourceClassDeletePermissionsStatement */
    ASTalterResourceClassDeletePermissionsStatement jjtn000 = new ASTalterResourceClassDeletePermissionsStatement(this, JJTALTERRESOURCECLASSDELETEPERMISSIONSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.resourceClass = resourceClass;
}
{/*@bgen(jjtree) alterResourceClassDeletePermissionsStatement */
    try {
/*@egen*/
    <LPAREN> 
        jjtn000.permissions = permissionList() 
    <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findGrantsForResourceClassStatement() :
{/*@bgen(jjtree) findGrantsForResourceClassStatement */
  ASTfindGrantsForResourceClassStatement jjtn000 = new ASTfindGrantsForResourceClassStatement(this, JJTFINDGRANTSFORRESOURCECLASSSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findGrantsForResourceClassStatement */
    try {
/*@egen*/
    jjtn000.resourceClass = resourceClass()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 4.2 Subject Roles /////////////////////////////////////////////////////////

void grantRoleStatement() :
{/*@bgen(jjtree) grantRoleStatement */
  ASTgrantRoleStatement jjtn000 = new ASTgrantRoleStatement(this, JJTGRANTROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) grantRoleStatement */
    try {
/*@egen*/
    jjtn000.role=role() "TO" jjtn000.subject = subject() 
    [ 
        "WITH" "GRANT" "OPTION" 
        { 
            jjtn000.canGrant = true; 
        } 
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void revokeRoleStatement() :
{/*@bgen(jjtree) revokeRoleStatement */
  ASTrevokeRoleStatement jjtn000 = new ASTrevokeRoleStatement(this, JJTREVOKEROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) revokeRoleStatement */
    try {
/*@egen*/
    jjtn000.role=role() "FROM" jjtn000.subject=subject()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findRolesStatement(boolean direct) :
{/*@bgen(jjtree) findRolesStatement */
    ASTfindRolesStatement jjtn000 = new ASTfindRolesStatement(this, JJTFINDROLESSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
/*@egen*/
    jjtn000.direct = direct;
}
{/*@bgen(jjtree) findRolesStatement */
    try {
/*@egen*/
    jjtn000.subject=subject()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findGrantsForSubjectStatement() :
{/*@bgen(jjtree) findGrantsForSubjectStatement */
  ASTfindGrantsForSubjectStatement jjtn000 = new ASTfindGrantsForSubjectStatement(this, JJTFINDGRANTSFORSUBJECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findGrantsForSubjectStatement */
    try {
/*@egen*/
    jjtn000.subject=subject() 
    [ "ON" jjtn000.resource = resource() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void findGrantsForRoleStatement() :
{/*@bgen(jjtree) findGrantsForRoleStatement */
  ASTfindGrantsForRoleStatement jjtn000 = new ASTfindGrantsForRoleStatement(this, JJTFINDGRANTSFORROLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) findGrantsForRoleStatement */
    try {
/*@egen*/
    jjtn000.role=role() 
    [ "ON" jjtn000.resource = resource() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 4.3 Role Permissions on Resources /////////////////////////////////////////

void grantPermissionStatement() :
{/*@bgen(jjtree) grantPermissionStatement */
  ASTgrantPermissionStatement jjtn000 = new ASTgrantPermissionStatement(this, JJTGRANTPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) grantPermissionStatement */
    try {
/*@egen*/
    jjtn000.permission = permission() 
    "ON" jjtn000.resource = resource() 
    [
        "RECURSIVE" 
        { 
            jjtn000.recursive = true; 
        } 
    ] 
    "TO" jjtn000.role = role()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

void revokePermissionStatement() :
{/*@bgen(jjtree) revokePermissionStatement */
  ASTrevokePermissionStatement jjtn000 = new ASTrevokePermissionStatement(this, JJTREVOKEPERMISSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) revokePermissionStatement */
    try {
/*@egen*/
    jjtn000.permission = permission() 
    "ON" jjtn000.resource = resource() 
    "FROM" jjtn000.role = role()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}
            
void findGrantsForResourceStatement() :
{/*@bgen(jjtree) findGrantsForResourceStatement */
  ASTfindGrantsForResourceStatement jjtn000 = new ASTfindGrantsForResourceStatement(this, JJTFINDGRANTSFORRESOURCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ 
}
{/*@bgen(jjtree) findGrantsForResourceStatement */
    try {
/*@egen*/
    jjtn000.resource=resource()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// 5.0 Impersonation /////////////////////////////////////////////////////////

// whoamiStatement node is defined inline in statement() non-terminal

void impersonateStatement() :
{/*@bgen(jjtree) impersonateStatement */
  ASTimpersonateStatement jjtn000 = new ASTimpersonateStatement(this, JJTIMPERSONATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) impersonateStatement */
    try {
/*@egen*/
    jjtn000.subject = subject() | 
    "SELF"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}

// Miscelenaous statements ///////////////////////////////////////////////////

void echoStatement() :
{/*@bgen(jjtree) echoStatement */
  ASTechoStatement jjtn000 = new ASTechoStatement(this, JJTECHOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) echoStatement */
    try {
/*@egen*/
    jjtn000.message = name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}
