/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package org.objectledge.coral.script.parser;

public class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected RML parser;

  Token firstToken;
  Token lastToken;
  
  String entityName;
  long entityId;
  
  String name;
  String value;

  ASTattributeClass attributeClass;
  ASTresourceClass resourceClass;  
  String domain;
  ASTattributeFlagList attributeFlags;
  ASTresourceClassFlagList resourceClassFlags;
  String javaClass;
  String handlerClass;
  String dbTable;
  String newName;
  ASTresourceClassList superClasses;
  ASTattributeDefinitionList attributeDefinitions;
  ASTpermissionList permissions;
  String attributeName;
  ASTattributeDefinition attributeDefinition;
  ASTresourceClass superClass;
  ASTattributeList attributeValues;
  ASTpermission permission;
  ASTroleList subRoles;
  ASTrole role;
  boolean direct;
  ASTroleList roles;
  ASTsubject subject;
  String lhs;
  String rhs;
  boolean literalRHS;
  int operator;
  String alias;
  boolean dir;
  ASTresource resource;
  ASTclassAndAliasSpecifierList from;
  ASTconditionalExpression where;
  ASTselectList select;
  ASTorderByList orderBy;
  boolean recursive;
  ASTsubject owner;
  ASTattribute attribute;
  boolean canGrant;
  String message;
  
  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(RML p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(RMLVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(RMLVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return RMLTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }
}

