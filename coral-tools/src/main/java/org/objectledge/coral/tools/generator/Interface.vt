#*
# Copyright (c) 2003, Caltha - Gajda, Krzewski, Mach, Potempski Sp.J.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, 
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# * Neither the name of the Caltha - Gajda, Krzewski, Mach, Potempski Sp.J. 
#   nor the names of its contributors may be used to endorse or promote products 
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.
*###
#set($attributes = $class.concreteDeclaredAttributes)
#set($parents = $class.declaredParentClasses)
##
$imports.add("org.objectledge.coral.store.Resource")##
##
#if($primaryParentClass)
$imports.add("org.objectledge.coral.schema.ResourceClass")##
$imports.add("org.objectledge.coral.security.Subject")##
$imports.add("java.util.Date")##
#end
##
#foreach($attr in $attributes)
#if(!$attr.primitive)
$imports.add($attr.getFQJavaType())##
#if(!$attr.readonly && $attr.required)
$imports.add("org.objectledge.coral.store.ValueRequiredException")##	
#end
#end
#end
#foreach($parent in $parents)
$imports.add($parent.getFQInterfaceClassName())##
#end
##
$header##

package $class.packageName;

$imports##
/**
 * Defines the accessor methods of <code>$class.name</code> Coral resource class.
 *
 * @author Coral Maven plugin
 */
public interface ${class.interfaceClassName}
#if($parents.size() > 0)
    extends Resource, #foreach($parent in $parents)${parent.interfaceClassName}#if($velocityCount != $parents.size()), #end#end

#else
    extends Resource
#end
{
    // constants /////////////////////////////////////////////////////////////

    /** The name of the Coral resource class. */    
    public static final String CLASS_NAME = "${class.name}";
#if($attributes.size() > 0)

    // public interface //////////////////////////////////////////////////////
#foreach($attr in $attributes)
#if($attr.primitive)
#if($attr.required)
	
    /**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @return the value of the the <code>${attr.name}</code> attribute.
     */
    public ${attr.javaType} get${attr.javaName}();
#else
	
    /**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @return the value of the the <code>${attr.name}</code> attribute.
     * @throws IllegalStateException if the value of the attribute is 
     *         undefined.
     */
    public ${attr.javaType} get${attr.javaName}()
		throws IllegalStateException;

	/**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @param defaultValue the value to return if the attribute is undefined.
     * @return the value of the <code>${attr.name}</code> attribute.
     */
    public ${attr.javaType} get${attr.javaName}(${attr.javaType} defaultValue);
#end
#if(!$attr.readonly)

    /**
     * Sets the value of the <code>${attr.name}</code> attribute.
     *
     * @param value the value of the <code>${attr.name}</code> attribute.
     */
    public void set${attr.javaName}($attr.javaType value);
#if(!$attr.required)

	/**
     * Removes the value of the <code>${attr.name}</code> attribute.
     */
    public void unset${attr.javaName}();
#end ## !$attr.required
#end ## !$attr.readonly
#else ## !$attr.java_primitive

    /**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @return the value of the the <code>${attr.name}</code> attribute.
     */
    public $attr.javaType get${attr.javaName}();
#if(!$attr.required)
    
    /**
     * Returns the value of the <code>${attr.name}</code> attribute.
     *
     * @param defaultValue the value to return if the attribute is undefined.
     * @return the value of the <code>${attr.name}</code> attribute.
     */
    public $attr.javaType get${attr.javaName}(${attr.javaType} defaultValue);
#end	
#if(!$attr.readonly)
#if(!$attr.required)

    /**
     * Sets the value of the <code>${attr.name}</code> attribute.
     *
     * @param value the value of the <code>${attr.name}</code> attribute,
     *        or <code>null</code> to remove value.
     */
    public void set${attr.javaName}(${attr.javaType} value);   
#else ## $attr.required

    /**
     * Sets the value of the <code>${attr.name}</code> attribute.
     *
     * @param value the value of the <code>${attr.name}</code> attribute.
     * @throws ValueRequiredException if you attempt to set a <code>null</code> 
     *         value.
     */
    public void set${attr.javaName}($attr.javaType value)
        throws ValueRequiredException;
#end ## $attr.required
#end ## !$attr.readonly   
#end ## !$attr.java_primitive
#if(!$attr.required)

	/**
	 * Checks if the value of the <code>${attr.name}</code> attribute is defined.
	 *
	 * @return <code>true</code> if the value of the <code>${attr.name}</code> attribute is defined.
	 */
    public boolean is${attr.javaName}Defined();
#end
#end ## #foreach $attr
#end ## $attributes.size() > 0
#if($primaryParentClass)
    /**
     * Returns the path name of the resource.
     *
     * <p>The path name is composed of the names of all of the resource's
     * parents, separated by / characters. If the top level parent (resource
     * that has <code>null</code> parent) is the 'root' resource #1, the
     * pathname will start with a /. Please note that the pathname can also
     * denote other resources than this one, unless all resources in your
     * system have unique names.</p>
     *
     * @return the pathname of the resource.
     */
    public String getPath();
    
    /**
     * Returns the parent resource.
     *
     * <p><code>null</code> is returned for top-level (root)
     * resources. Depending on the application one or more top-level resources
     * exist in the system.</p>
     *
     * @return the parent resource.
     */
    public Resource getParent();

	/**
     * Returns the class this resource belongs to.
     *
     * @return the class this resource belongs to.
     */
    public ResourceClass getResourceClass();

    /**
     * Returns the owner of the resource.
     *
     * @return the owner of the resource.
     */
    public Subject getOwner();	

	/**
     * Returns the {@link Subject} that created this resource.
     *
     * @return the {@link Subject} that created this resource.
     */
    public Subject getCreatedBy();
    
    /**
     * Returns the creation time for this resource.
     *
     * @return the creation time for this resource.
     */
    public Date getCreationTime();

    /**
     * Returns the {@link Subject} that modified this resource most recently.
     *
     * @return the {@link Subject} that modified this resource most recently.
     */
    public Subject getModifiedBy();

    /**
     * Returns the last modification time for this resource.
     *
     * @return the last modification time for this resource.
     */
    public Date getModificationTime();
#end

    // @custom methods ///////////////////////////////////////////////////////
$!{custom}}
